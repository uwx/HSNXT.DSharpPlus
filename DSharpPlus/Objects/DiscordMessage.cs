using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Threading.Tasks;

namespace DSharpPlus
{
    /// <summary>
    /// 
    /// </summary>
    public class DiscordMessage : SnowflakeObject
    {
        /// <summary>
        /// ID of the channel the message was sent in
        /// </summary>
        [JsonProperty("channel_id")]
        public ulong ChannelID { get; internal set; }
        /// <summary>
        /// The channel the message was sent in
        /// </summary>
        [JsonIgnore]
        public DiscordChannel Parent => DiscordClient._guilds[DiscordClient.GetGuildIdFromChannelID(ChannelID)].Channels[DiscordClient.GetChannelIndex(ChannelID)];
        /// <summary>
        /// The author of this message
        /// </summary>
        [JsonProperty("author")]
        public DiscordUser Author { get; internal set; }
        /// <summary>
        /// Contents of the message
        /// </summary>
        [JsonProperty("content")]
        public string Content { get; internal set; }
        /// <summary>
        /// When this message was sent
        /// </summary>
        [JsonProperty("timestamp")]
        public string TimestampRaw { get; internal set; }
        /// <summary>
        /// When this message was sent
        /// </summary>
        [JsonIgnore]
        public DateTime Timestamp => DateTime.Parse(this.TimestampRaw);
        /// <summary>
        /// When this message was edited
        /// </summary>
        [JsonProperty("edited_timestamp")]
        public string EditedTimestampRaw { get; internal set; }
        /// <summary>
        /// When this message was edited
        /// </summary>
        [JsonIgnore]
        public DateTime EditedTimestamp => DateTime.Parse(this.EditedTimestampRaw);
        /// <summary>
        /// Whether this was a tts message
        /// </summary>
        [JsonProperty("tts")]
        public bool TTS { get; internal set; }
        /// <summary>
        /// Whether this message mentions everyone
        /// </summary>
        [JsonProperty("mention_everyone")]
        public bool MentionEveryone { get; internal set; }
        /// <summary>
        /// Users specifically mentioned in the message
        /// </summary>
        [JsonProperty("mentions")]
        public List<DiscordUser> Mentions { get; internal set; }
        /// <summary>
        /// Roles specifically mention in the message
        /// </summary>
        [JsonProperty("mentioned_roles")]
        public List<DiscordRole> MentionedRoles { get; internal set; }
        /// <summary>
        /// Any attached files
        /// </summary>
        [JsonProperty("attachments")]
        public List<object> Attachments { get; internal set; }
        /// <summary>
        /// Any embedded content
        /// </summary>
        [JsonProperty("embeds")]
        public List<DiscordEmbed> Embeds { get; internal set; }
        /// <summary>
        /// Reactions of the message
        /// </summary>
        [JsonProperty("reactions")]
        public List<DiscordReaction> Reactions { get; internal set; }
        /// <summary>
        /// Used for validating a message was sent
        /// </summary>
        [JsonProperty("nonce")]
        public ulong? Nonce { get; internal set; }
        /// <summary>
        /// Whether this message is pinned
        /// </summary>
        [JsonProperty("pinned")]
        public bool Pinned { get; internal set; }
        /// <summary>
        /// If generated by webhook, this is the webhook's id
        /// </summary>
        [JsonProperty("webhook_id")]
        public ulong? WebhookID { get; internal set; }

        /// <summary>
        /// Edit the message
        /// </summary>
        /// <param name="content"></param>
        /// <returns></returns>
        public async Task<DiscordMessage> Edit(string content) => await DiscordClient.InternalEditMessage(ChannelID, ID, content);
        /// <summary>
        /// Deletes the message
        /// </summary>
        /// <returns></returns>
        public async Task Delete() => await DiscordClient.InternalDeleteMessage(ChannelID, ID);
        /// <summary>
        /// Pin the message
        /// </summary>
        /// <returns></returns>
        public async Task Pin() => await DiscordClient.InternalAddPinnedChannelMessage(ChannelID, ID);
        /// <summary>
        /// Unpin the message
        /// </summary>
        /// <returns></returns>
        public async Task Unpin() => await DiscordClient.InternalDeletePinnedChannelMessage(ChannelID, ID);
        /// <summary>
        /// Respond to the message
        /// </summary>
        /// <param name="content"></param>
        /// <param name="tts"></param>
        /// <returns></returns>
        public async Task<DiscordMessage> Respond(string content, bool tts = false) => await DiscordClient.InternalCreateMessage(ChannelID, content, tts);
        /// <summary>
        /// Respond to the message
        /// </summary>
        /// <param name="content"></param>
        /// <param name="filepath"></param>
        /// <param name="filename"></param>
        /// <param name="tts"></param>
        /// <returns></returns>
        public async Task<DiscordMessage> Respond(string content, string filepath, string filename, bool tts = false) 
            => await DiscordClient.InternalUploadFile(ChannelID, filepath, filename, content, tts);
    }
}
