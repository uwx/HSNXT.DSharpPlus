{"Name":"Is","Description":"simple fluent assert for MSTest","Author":"neuecc","SubmittedOn":"10/18/2010 3:57:06 PM","Entries":["using System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace Microsoft.VisualStudio.TestTools.UnitTesting\r\n{\r\n    public static class Test\r\n    {\r\n        /// <summary>IsNull</summary>\r\n        public static void Is<T>(this T value)\r\n        {\r\n            Assert.IsNull(value);\r\n        }\r\n\r\n        public static void Is<T>(this T actual, T expected, string message = \"\")\r\n        {\r\n            Assert.AreEqual(expected, actual, message);\r\n        }\r\n\r\n        public static void Is<T>(this T actual, Func<T, bool> expected, string message = \"\")\r\n        {\r\n            Assert.IsTrue(expected(actual), message);\r\n        }\r\n\r\n        public static void Is<T>(this IEnumerable<T> actual, IEnumerable<T> expected, string message = \"\")\r\n        {\r\n            CollectionAssert.AreEqual(expected.ToArray(), actual.ToArray(), message);\r\n        }\r\n\r\n        public static void Is<T>(this IEnumerable<T> actual, params T[] expected)\r\n        {\r\n            Is(actual, expected.AsEnumerable());\r\n        }\r\n\r\n        public static void Is<T>(this IEnumerable<T> actual, IEnumerable<Func<T, bool>> expected)\r\n        {\r\n            var count = 0;\r\n            foreach (var cond in actual.Zip(expected, (v, pred) => pred(v)))\r\n            {\r\n                Assert.IsTrue(cond, \"Index = \" + count++);\r\n            }\r\n        }\r\n\r\n        public static void Is<T>(this IEnumerable<T> actual, params Func<T, bool>[] expected)\r\n        {\r\n            Is(actual, expected.AsEnumerable());\r\n        }\r\n    }\r\n}","[TestMethod]\r\npublic void Test()\r\n{\r\n    // actual.Is(expected)\r\n    \"foo\".Is(\"bar\");\r\n    // actual.Is(x => bool(expected cond))\r\n    \"foobar\".Is(s => s.StartsWith(\"f\") && s.EndsWith(\"r\"));\r\n    // IEnumerable<T>.Is(params expected) (CollectionAssert)\r\n    Enumerable.Range(1, 5).Is(1, 2, 3, 4, 5);\r\n}"]}