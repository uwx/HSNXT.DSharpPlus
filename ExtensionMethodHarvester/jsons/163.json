{"Name":"List AddElement","Description":"Make adding to list fluent and conditioned","Author":"Lasse Sj√∏rup","SubmittedOn":"4/11/2013 10:39:30 AM","Entries":["public static class ListExtensions\r\n{\r\n    public static List<T> AddElement<T>(this List<T> list, T item)\r\n    {\r\n        list.Add(item);\r\n        return list;\r\n    }\r\n\r\n    public static List<T> AddElementIf<T>(this List<T> list, bool condition, T item)\r\n    {\r\n        if (condition)\r\n        {\r\n            list.Add(item);\r\n        }\r\n\r\n        return list;\r\n    }\r\n\r\n    public static List<T> AddElementRange<T>(this List<T> list, IEnumerable<T> items)\r\n    {\r\n        list.AddRange(items);\r\n        return list;\r\n    }\r\n\r\n    public static List<T> AddElementRangeIf<T>(this List<T> list, bool condition, IEnumerable<T> items)\r\n    {\r\n        if (condition)\r\n        {\r\n            list.AddRange(items);\r\n        }\r\n        return list;\r\n    }\r\n}","var list = new List<string>();\r\nvar condition = true;\r\nlist.AddElement(\"line 1\")\r\n    .AddElementIf(condition, \"line 2\")\r\n    .AddElementRange(new[] {\"line 3\", \"line 4\"})\r\n    .AddElementRangeIf(condition, new[] {\"line 5\", \"line 6\"});"]}