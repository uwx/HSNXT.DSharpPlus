{"Name":"BinaryDeserializer","Description":"Deserializa um arquivo binario em uma lista generica","Author":"RodrigoDotNet","SubmittedOn":"2/27/2013 8:00:14 PM","Entries":["/// <summary>\r\n        /// Deserializa um arquivo binario em uma lista generica\r\n        /// </summary>\r\n        /// <typeparam name=\"T\"></typeparam>\r\n        /// <param name=\"lista\"></param>\r\n        /// <param name=\"path\">caminho do arquivo</param>\r\n        /// <returns>Lista deserializada</returns>\r\n        public static List<T> BinaryDeserializer<T>(this IList<T> lista, string path)\r\n        {\r\n            if (string.IsNullOrEmpty(path))\r\n            {\r\n                throw new ArgumentNullException(\"path\", \"caminho do xml n√£o pode ser nulo ou vazio\");\r\n            }\r\n\r\n            try\r\n            {\r\n                var inStr = new FileStream(path, FileMode.Open, FileAccess.Read);\r\n                var bf = new BinaryFormatter();\r\n                var list = bf.Deserialize(inStr) as List<T>;\r\n\r\n                return list;\r\n            }\r\n            catch (Exception e)\r\n            {\r\n                throw new Exception(e.Message, e);\r\n            }\r\n        }","var _estadosCidades=new List<Estado>();\r\n            _estadosCidades = _estadosCidades.BinaryDeserializer(\"cidades.dat\");"]}