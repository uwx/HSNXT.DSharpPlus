{"Name":"LimitTextLength","Description":"Limits a piece of text to a certain maximum length for the purpose of showing it to the user as part of some (G)UI or report that has limited space.","Author":"peSHIr","SubmittedOn":"5/6/2016 9:11:17 AM","Entries":["/// <summary>Limit the text length</summary>\r\n/// <param name=\"text\">Text to limit</param>\r\n/// <param name=\"maxLength\">Maximum allowed number of characters\r\n/// in the result</param>\r\n/// <param name=\"showEllipsis\"><code>true</code>=Limit\r\n/// <paramref name=\"text\"/> to first\r\n/// (<paramref name=\"maxLength\"/>-3) characters plus \"...\",\r\n/// <code>false</code>=Limit <paramref name=\"text\"/> to first\r\n/// <paramref name=\"maxLength\"/> characters</param>\r\n/// <returns>Content of <paramref name=\"text\"/>, but at most\r\n/// <paramref name=\"maxLength\"/> characters</returns>\r\n/// <remarks>With <paramref name=\"showEllipsis\"/> left to default\r\n/// value of <code>true</code> the result will be \"...\" even if\r\n/// you specify a maximum length less than or equal to 3.</remarks>\r\npublic static string LimitTextLength(this string text, int maxLength, bool showEllipsis = true)\r\n{\r\n\tif (maxLength < 0) throw new ArgumentOutOfRangeException(\"maxLength\", \"Value must not be negative\");\r\n\tif (string.IsNullOrWhiteSpace(text)) return string.Empty;\r\n\tvar n = text.Length;\r\n\tvar ellipsis = showEllipsis ? \"...\" : string.Empty;\r\n\tvar minLength = ellipsis.Length;\r\n\tmaxLength = Math.Max(minLength, maxLength);\r\n\treturn n > maxLength ? text.Substring(0, Math.Min(maxLength - minLength, n)) + ellipsis : text;\r\n}","[TestMethod]\r\npublic void LimitTextLength_null()\r\n{\r\n\tforeach (var n in Enumerable.Range(0, 10))\r\n\t{\r\n\t\t((string)null).LimitTextLength(n).Should().BeEmpty();\r\n\t}\r\n}\r\n\r\n[TestMethod]\r\npublic void LimitTextLength_empty()\r\n{\r\n\tforeach (var n in Enumerable.Range(0, 10))\r\n\t{\r\n\t\tstring.Empty.LimitTextLength(n).Should().BeEmpty();\r\n\t}\r\n}\r\n\r\n[TestMethod]\r\n[ExpectedException(typeof(ArgumentOutOfRangeException))]\r\npublic void LimitTextLength_negative_length()\r\n{\r\n\t\"test\".LimitTextLength(-1);\r\n}\r\n\r\n[TestMethod]\r\npublic void LimitTextLength_cut_off_yes_ellipsis_default()\r\n{\r\n\t\"abcdefg\".LimitTextLength(6).Should().Be(\"abc...\");\r\n}\r\n\r\n[TestMethod]\r\npublic void LimitTextLength_cut_off_yes_ellipsis_no()\r\n{\r\n\t\"abcdefg\".LimitTextLength(6, false).Should().Be(\"abcdef\");\r\n}\r\n\r\n[TestMethod]\r\npublic void LimitTextLength_cut_off_yes_ellipsis_yes()\r\n{\r\n\t\"abcdefg\".LimitTextLength(6, true).Should().Be(\"abc...\");\r\n}\r\n\r\n[TestMethod]\r\npublic void LimitTextLength_cut_off_edge()\r\n{\r\n\t\"abcdefg\".LimitTextLength(7).Should().Be(\"abcdefg\");\r\n}\r\n\r\n[TestMethod]\r\npublic void LimitTextLength_cut_off_no()\r\n{\r\n\t\"abcdefg\".LimitTextLength(8).Should().Be(\"abcdefg\");\r\n}\r\n\r\n[TestMethod]\r\npublic void LimitTextLength_almost_ellipsis_length()\r\n{\r\n\t\"abcdefg\".LimitTextLength(4, true).Should().Be(\"a...\");\r\n}\r\n\r\n[TestMethod]\r\npublic void LimitTextLength_exactly_ellipsis_length()\r\n{\r\n\t\"abcdefg\".LimitTextLength(3, true).Should().Be(\"...\");\r\n}\r\n\r\n[TestMethod]\r\npublic void LimitTextLength_shorter_than_ellipsis()\r\n{\r\n\t\"abcdefg\".LimitTextLength(2, true).Should().Be(\"...\");\r\n}"]}