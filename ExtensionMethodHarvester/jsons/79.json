{"Name":"Combinations","Description":"Returns all combinations of a chosen amount of selected elements in the sequence.","Author":"Steven Jeuris","SubmittedOn":"11/15/2011 9:28:20 AM","Entries":["/// <summary>\r\n///   Returns all combinations of a chosen amount of selected elements in the sequence.\r\n/// </summary>\r\n/// <typeparam name = \"T\">The type of the elements of the input sequence.</typeparam>\r\n/// <param name = \"source\">The source for this extension method.</param>\r\n/// <param name = \"select\">The amount of elements to select for every combination.</param>\r\n/// <param name = \"repetition\">True when repetition of elements is allowed.</param>\r\n/// <returns>All combinations of a chosen amount of selected elements in the sequence.</returns>\r\npublic static IEnumerable<IEnumerable<T>> Combinations<T>( this IEnumerable<T> source, int select, bool repetition = false )\r\n{\r\n\tContract.Requires( source != null );\r\n\tContract.Requires( select >= 0 );\r\n\r\n\treturn select == 0\r\n\t\t? new[] { new T[0] }\r\n\t\t: source.SelectMany( ( element, index ) =>\r\n\t\t\tsource\r\n\t\t\t\t.Skip( repetition ? index : index + 1 )\r\n\t\t\t\t.Combinations( select - 1, repetition )\r\n\t\t\t\t.Select( c => new[] { element }.Concat( c ) ) );\r\n}","int[] numbers = new[] { 0, 1 };\r\nvar result = numbers.Combinations( 2, true );\r\n// result == {{0, 0}, {0, 1}, {1, 0}, {1, 1}}"]}