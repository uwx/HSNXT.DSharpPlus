{"Name":"Resize","Description":"takes a byte[], and ints for width/height. returns a byte[] for the new image. keeps a static copy of previously provided sizes to reduce GC activity.","Author":"esp","SubmittedOn":"4/17/2011 8:27:14 AM","Entries":["private static readonly IList<Tuple<Rectangle, Image>> BitmapSizes = new List<Tuple<Rectangle, Image>>();\r\n     //adapted from http://www.webcosmoforums.com/asp/321-create-high-quality-thumbnail-resize-image-dynamically-asp-net-c-code.html\r\n      //TODO: figure out how expensive this method is\r\n      //TODO: see if there's a way to make the IDisposable objects static\r\n      //TODO: make sure caching is set up properly to reduce usage\r\n      public static byte[] Resize(this byte[] source, int width, int height) {\r\n         try {\r\n            using (var image = Image.FromStream(new MemoryStream(source), true, true)) {\r\n               var srcWidth = image.PhysicalDimension.Width;\r\n               var srcHeight = image.PhysicalDimension.Height;\r\n               if (srcWidth == width && srcHeight == height)\r\n                  return source;\r\n               var scaleW = (double)width / srcWidth;\r\n               var scaleH = (double)height / srcHeight;\r\n               if (scaleW < scaleH) {\r\n                  width = (int)Math.Round((scaleW * srcWidth));\r\n                  height = (int)Math.Round((scaleW * srcHeight));\r\n               } else {\r\n                  width = (int)Math.Round((scaleH * srcWidth));\r\n                  height = (int)Math.Round((scaleH * srcHeight));\r\n               }\r\n               var bmpTouple = BitmapSizes.FirstOrDefault(t => t.Item1.Height == height && t.Item1.Width == width);\r\n               if (bmpTouple == null) {\r\n                  bmpTouple = new Tuple<Rectangle, Image>(\r\n                     new Rectangle(0, 0, width, height),\r\n                     new Bitmap(width, height));\r\n                  BitmapSizes.Add(bmpTouple);\r\n               }\r\n               var rect = bmpTouple.Item1;\r\n               var bmp = bmpTouple.Item2;\r\n               using (Graphics gr = Graphics.FromImage(bmp)) {\r\n                  gr.SmoothingMode = System.Drawing.Drawing2D.SmoothingMode.HighQuality;\r\n                  gr.CompositingQuality = System.Drawing.Drawing2D.CompositingQuality.HighQuality;\r\n                  gr.InterpolationMode = System.Drawing.Drawing2D.InterpolationMode.High;\r\n                  gr.DrawImage(image, rect);\r\n                  using (var outStream = new MemoryStream()) {\r\n                     bmp.Save(outStream, ImageFormat.Jpeg);\r\n                     return outStream.ToArray();\r\n                  }\r\n               }\r\n            }\r\n         } catch (Exception ex) {\r\n            throw;\r\n         }\r\n         return null;\r\n      }","public byte[] ImageResult(byte[] imageData, int width, int height) {\r\n         return imageData.Resize(width, height);\r\n      }"]}