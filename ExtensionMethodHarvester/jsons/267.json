{"Name":"IndexOf","Description":"Gets the index of the give value in a collection. Is overloaded to take a start parameter as well.","Author":"Daniel Gidman","SubmittedOn":"12/3/2010 8:41:36 PM","Entries":["public static int IndexOf<T>(this IEnumerable<T> obj, T value)\r\n{\r\n    return obj.IndexOf(value, 0);\r\n}\r\n\r\npublic static int IndexOf<T>(this IEnumerable<T> obj, T value, int start)\r\n{\r\n    if (start >= obj.Count()) return -1;\r\n    if (start < 0) throw new IndexOutOfRangeException(\"start must be a non-negative integer\");\r\n    for (int i = start; i < obj.Count(); ++i)\r\n    {\r\n        if (value.Equals(obj.ElementAt(i))) return i;\r\n    }\r\n    return -1;\r\n}","var i = new Collection<int>{0,1,2,3,4,5,6,7};\r\n\r\nint first = i.IndexOf(0);\r\nint second = i.IndexOf(0,1);"]}