{"Name":"AwaitableTaskEnumerableExtensions","Description":"Awaitable fluent extensions for enumerables of task","Author":"Aleix Dom√®nech","SubmittedOn":"4/6/2017 8:35:27 PM","Entries":["/// <summary>\r\n        ///     Linq extension to be able to fluently wait for all of <see cref=\"IEnumerable{T}\" /> of <see cref=\"Task\" /> just\r\n        ///     like <see cref=\"Task.WhenAll(System.Threading.Tasks.Task[])\" />.\r\n        /// </summary>\r\n        /// <param name=\"tasks\">The tasks.</param>\r\n        /// <returns>An awaitable task</returns>\r\n        /// <remarks></remarks>\r\n        /// <example>\r\n        ///     var something = await foos.Select(foo => BarAsync(foo)).WhenAll();\r\n        /// </example>\r\n        /// <exception cref=\"System.ArgumentNullException\"></exception>\r\n        /// <exception cref=\"System.ArgumentException\"></exception>\r\n        public static Task WhenAll(this IEnumerable<Task> tasks)\r\n        {\r\n            var enumeratedTasks = tasks as Task[] ?? tasks?.ToArray();\r\n\r\n            return Task.WhenAll(enumeratedTasks);\r\n        }\r\n\r\n        /// <summary>\r\n        ///     Linq extension to be able to fluently wait for any of <see cref=\"IEnumerable{T}\" /> of <see cref=\"Task\" /> just\r\n        ///     like <see cref=\"Task.WhenAll(System.Threading.Tasks.Task[])\" />.\r\n        /// </summary>\r\n        /// <param name=\"tasks\">The tasks.</param>\r\n        /// <returns>An awaitable task</returns>\r\n        /// <remarks></remarks>\r\n        /// <example>\r\n        ///     var something = await foos.Select(foo => BarAsync(foo)).WhenAll();\r\n        /// </example>\r\n        /// <exception cref=\"System.ArgumentNullException\"></exception>\r\n        /// <exception cref=\"System.ArgumentException\"></exception>\r\n        public static Task WhenAny(this IEnumerable<Task> tasks)\r\n        {\r\n            var enumeratedTasks = tasks as Task[] ?? tasks.ToArray();\r\n\r\n            return Task.WhenAny(enumeratedTasks);\r\n        }\r\n\r\n        /// <summary>\r\n        ///     Linq extension to be able to fluently wait for all of <see cref=\"IEnumerable{T}\" /> of <see cref=\"Task\" /> just\r\n        ///     like <see cref=\"Task.WhenAll(System.Threading.Tasks.Task{TResult}[])\" />.\r\n        /// </summary>\r\n        /// <param name=\"tasks\">The tasks.</param>\r\n        /// <returns>An awaitable task</returns>\r\n        /// <remarks></remarks>\r\n        /// <example>\r\n        ///     var bars = await foos.Select(foo => BarAsync(foo)).WhenAll();\r\n        /// </example>\r\n        /// <exception cref=\"System.ArgumentNullException\"></exception>\r\n        /// <exception cref=\"System.ArgumentException\"></exception>\r\n        public static async Task<IEnumerable<TResult>> WhenAll<TResult>(this IEnumerable<Task<TResult>> tasks)\r\n        {\r\n            var enumeratedTasks = tasks as Task<TResult>[] ?? tasks.ToArray();\r\n\r\n            var result = await Task.WhenAll(enumeratedTasks);\r\n            return result;\r\n        }\r\n\r\n        /// <summary>\r\n        ///     Linq extension to be able to fluently wait for all of <see cref=\"IEnumerable{T}\" /> of <see cref=\"Task\" /> just\r\n        ///     like <see cref=\"Task.WhenAny(System.Threading.Tasks.Task{TResult}[])\" />.\r\n        /// </summary>\r\n        /// <param name=\"tasks\">The tasks.</param>\r\n        /// <returns>An awaitable task</returns>\r\n        /// <remarks></remarks>\r\n        /// <example>\r\n        ///     var bar = await foos.Select(foo => BarAsync(foo)).WhenAll();\r\n        /// </example>\r\n        /// <exception cref=\"System.ArgumentNullException\"></exception>\r\n        /// <exception cref=\"System.ArgumentException\"></exception>\r\n        public static async Task<TResult> WhenAny<TResult>(this IEnumerable<Task<TResult>> tasks)\r\n        {\r\n            var enumeratedTasks = tasks as Task<TResult>[] ?? tasks.ToArray();\r\n\r\n            var result = await await Task.WhenAny(enumeratedTasks);\r\n            return result;\r\n        }","private static void Main(string[] args)\r\n        {\r\n            FooBarAsync().Wait();\r\n        }\r\n\r\n        private static IEnumerable<int> foos = new[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };\r\n\r\n        public static async Task FooBarAsync()\r\n        {\r\n            var watch = new Stopwatch();\r\n            watch.Start();\r\n\r\n            await foos.Select(foo => BarAsync(foo)).WhenAll();\r\n            var results = await foos.Select(foo => BarAsync(foo)).WhenAll();\r\n\r\n            watch.Stop();\r\n            Console.WriteLine(\"WhenAll -->:\" + watch.Elapsed);\r\n            watch.Reset();\r\n\r\n            watch.Start();\r\n\r\n            await foos.Select(foo => BarAsync(foo)).WhenAny();\r\n            var result = await foos.Select(foo => BarAsync(foo)).WhenAny();\r\n\r\n            watch.Stop();\r\n            Console.WriteLine(\"WhenAny -->:\" + watch.Elapsed);\r\n            \r\n            Console.ReadKey();\r\n        }\r\n\r\n        public static async Task<int> BarAsync(int something)\r\n        {\r\n            await Task.Delay(new Random((int)DateTime.Now.Ticks).Next(100, 1500));\r\n\r\n            return something;\r\n        }"]}