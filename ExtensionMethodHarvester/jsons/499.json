{"Name":"ImplementsInterfaces(List<Type> types)","Description":"Determines if a class object implements an interface type and returns a list of types it actually implements. If no matching type is found an empty list will be returned.","Author":"James Levingston","SubmittedOn":"10/19/2010 11:17:03 PM","Entries":["public static List<Type> ImplementsInterfaces(this object obj, List<Type> interfaces)\r\n        {\r\n            if (obj == null || interfaces == null)\r\n                return new List<Type>();\r\n\r\n            var filter = new System.Reflection.TypeFilter(\r\n                (Type typeObj, object criteriaObj) => { return typeObj.ToString() == criteriaObj.ToString() ? true : false; }\r\n                );\r\n\r\n            Func<Type, Type> func = (Type t) => { return obj.GetType().FindInterfaces(filter, t.FullName).Length > 0 ? t : null; };\r\n\r\n            return (from i in interfaces select func(i)).Where(t => t == null ? false : true).ToList();\r\n        }","var t = new Test();\r\nif (t.ImplementsInterface(new List<Type> { typeof(ITest) }).Count > 0)\r\n { \r\n                //Do Something\r\n }"]}