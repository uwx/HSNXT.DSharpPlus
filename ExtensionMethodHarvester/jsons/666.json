{"Name":"FindMin() and FindMax()","Description":"Selects the object in a list with the minimum or maximum value on a particular property","Author":"Fons Sonnemans","SubmittedOn":"10/7/2016 11:00:52 AM","Entries":["static class Extensions {\r\n\r\n    public static T FindMin<T, TValue>(this IEnumerable<T> list, Func<T, TValue> predicate)\r\n                                                        where TValue : IComparable<TValue> {\r\n\r\n        T result = list.FirstOrDefault();\r\n        if (result != null) {\r\n            var bestMin = predicate(result);\r\n            foreach (var item in list.Skip(1)) {\r\n                var v = predicate(item);\r\n                if (v.CompareTo(bestMin) < 0) {\r\n                    bestMin = v;\r\n                    result = item;\r\n                }\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    public static T FindMax<T, TValue>(this IEnumerable<T> list, Func<T, TValue> predicate)\r\n                                                            where TValue : IComparable<TValue> {\r\n        T result = list.FirstOrDefault();\r\n        if (result != null) {\r\n            var bestMax = predicate(result);\r\n            foreach (var item in list.Skip(1)) {\r\n                var v = predicate(item);\r\n                if (v.CompareTo(bestMax) > 0) {\r\n                    bestMax = v;\r\n                    result = item;\r\n                }\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n}","var l = new List<Employee>();\r\nvar r = new Random();\r\nfor (int i = 0; i < 1000000; i++) {\r\n    l.Add(new Employee { Name = i.ToString(), Salary = r.Next(10000) });\r\n}\r\n\r\nConsole.WriteLine(l.FindMin(emp => emp.Salary)?.Name);\r\nConsole.WriteLine(l.FindMax(emp => emp.Salary)?.Name);"]}