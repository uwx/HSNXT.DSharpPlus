{"Name":"IsNumeric","Description":"Returns true if the type can be considered numeric","Author":"Tim Scott (lunaverse.wordpress.com)","SubmittedOn":"10/18/2010 7:44:34 AM","Entries":["public static bool IsNumeric(this Type t)\r\n{\r\n\tvar type = t.GetTypeWithoutNullability();\r\n\treturn\r\n\t\ttype == typeof (Int16) ||\r\n\t\ttype == typeof (Int32) ||\r\n\t\ttype == typeof (Int64) ||\r\n\t\ttype == typeof (UInt16) ||\r\n\t\ttype == typeof (UInt32) ||\r\n\t\ttype == typeof (UInt64) ||\r\n\t\ttype == typeof (decimal) ||\r\n\t\ttype == typeof (float) ||\r\n\t\ttype == typeof (double);\r\n}\r\n\r\npublic static Type GetTypeWithoutNullability(this Type t)\r\n{\r\n\treturn t.IsNullable() ? new NullableConverter(t).UnderlyingType : t;\r\n}\r\n\r\npublic static bool IsNullable(this Type t)\r\n{\r\n\treturn t.IsGenericType &&\r\n\t\t   t.GetGenericTypeDefinition() == typeof (Nullable<>);\r\n}","if (someType.IsNumeric())\r\n{\r\n    do something that requires type be numeric\r\n}"]}