{"Name":"ToDictionary() - for enumerations of groupings","Description":"Converts an IEnumerable<IGrouping<TKey,TValue>> to a Dictionary<TKey,List<TValue>> so that you can easily convert the results of a GroupBy clause to a Dictionary of Groupings. The out-of-the-box ToDictionary() LINQ extension methods require a key and element extractor which are largely redundant when being applied to an enumeration of groupings, so this is a short-cut.","Author":"James Michael Hare (BlackRabbitCoder)","SubmittedOn":"10/21/2010 6:28:55 PM","Entries":["using System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace SharedAssemblies.Core.Extensions\r\n{\r\n    // This class contains helper additions to linq.\r\n    public static class EnumerableExtensions\r\n    {\r\n        /// <summary>\r\n        /// Converts an enumeration of groupings into a Dictionary of those groupings.\r\n        /// </summary>\r\n        /// <typeparam name=\"TKey\">Key type of the grouping and dictionary.</typeparam>\r\n        /// <typeparam name=\"TValue\">Element type of the grouping and dictionary list.</typeparam>\r\n        /// <param name=\"groupings\">The enumeration of groupings from a GroupBy() clause.</param>\r\n        /// <returns>A dictionary of groupings such that the key of the dictionary is TKey type and the value is List of TValue type.</returns>\r\n        public static Dictionary<TKey, List<TValue>> ToDictionary<TKey,TValue>(this IEnumerable<IGrouping<TKey,TValue>> groupings)\r\n        {\r\n            return groupings.ToDictionary(group => group.Key, group => group.ToList());\r\n        }\r\n    }\r\n}","Dictionary<string,List<Product>> results = productList.GroupBy(product => product.Category).ToDictionary();"]}