{"Name":"Cache()","Description":"Caches the results of an IEnumerable.","Author":"YellPika","SubmittedOn":"10/16/2012 5:52:19 AM","Entries":["public static IEnumerable<T> Cache<T>(this IEnumerable<T> source)\r\n{\r\n    return CacheHelper(source.GetEnumerator());\r\n}\r\n\r\nprivate static IEnumerable<T> CacheHelper<T>(IEnumerator<T> source)\r\n{\r\n    var isEmpty = new Lazy<bool>(() => !source.MoveNext());\r\n    var head = new Lazy<T>(() => source.Current);\r\n    var tail = new Lazy<IEnumerable<T>>(() => CacheHelper(source));\r\n\r\n    return CacheHelper(isEmpty, head, tail);\r\n}\r\n\r\nprivate static IEnumerable<T> CacheHelper<T>(\r\n    Lazy<bool> isEmpty, \r\n    Lazy<T> head, \r\n    Lazy<IEnumerable<T>> tail)\r\n{\r\n    if (isEmpty.Value)\r\n        yield break;\r\n\r\n    yield return head.Value;\r\n    foreach (var value in tail.Value)\r\n        yield return value;\r\n}","var cached = mySequence.Cache();"]}