{"Name":"RemoveAll()","Description":"ICollection interface has List type most of time, so this Extension allows to call RemoveAll() method with the same signature like on List","Author":"Krzysztof Morcinek","SubmittedOn":"8/30/2016 11:11:57 AM","Entries":["using System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\npublic static class CollectionExtensions\r\n{\r\n    public static void RemoveAll<T>(this ICollection<T> @this, Func<T, bool> predicate)\r\n    {\r\n        List<T> list = @this as List<T>;\r\n\r\n        if (list != null)\r\n        {\r\n            list.RemoveAll(new Predicate<T>(predicate));\r\n        }\r\n        else\r\n        {\r\n            List<T> itemsToDelete = @this\r\n                .Where(predicate)\r\n                .ToList();\r\n\r\n            foreach (var item in itemsToDelete)\r\n            {\r\n                @this.Remove(item);\r\n            }\r\n        }\r\n    }\r\n}","ICollection<int> items = new List<int>(new[] { 1, 3, 5 });\r\nitems.RemoveAll(x => x > 2);\r\n\r\nICollection<int> linkedItems = new LinkedList<int>(new[] { 1, 3, 5 });\r\nlinkedItems.RemoveAll(x => x > 2);"]}