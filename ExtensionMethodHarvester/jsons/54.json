{"Name":"DrawAndFillRoundedRectangle","Description":"Draw and fill a rectangle with some (or all) the angles rounded.","Author":"Mattia Belletti","SubmittedOn":"8/26/2010 11:03:10 AM","Entries":["using System.Drawing.Drawing2D;\r\n\r\n/// <summary>\r\n/// Angles of a rectangle.\r\n/// </summary>\r\npublic enum RectAngles\r\n{\r\n    None = 0,\r\n    TopLeft = 1,\r\n    TopRight = 2,\r\n    BottomLeft = 4,\r\n    BottomRight = 8,\r\n    All = TopLeft | TopRight | BottomLeft | BottomRight\r\n}\r\n\r\n/// <summary>\r\n/// Draw and fill a rounded rectangle.\r\n/// </summary>\r\n/// <param name=\"g\">The graphics object to use.</param>\r\n/// <param name=\"p\">The pen to use to draw the rounded rectangle. If <code>null</code>, the border is not drawn.</param>\r\n/// <param name=\"b\">The brush to fill the rounded rectangle. If <code>null</code>, the internal is not filled.</param>\r\n/// <param name=\"r\">The rectangle to draw.</param>\r\n/// <param name=\"horizontalDiameter\">Horizontal diameter for the rounded angles.</param>\r\n/// <param name=\"verticalDiameter\">Vertical diameter for the rounded angles.</param>\r\n/// <param name=\"rectAngles\">Angles to round.</param>\r\npublic static void DrawAndFillRoundedRectangle(this Graphics g, Pen p, Brush b, Rectangle r, int horizontalDiameter, int verticalDiameter, RectAngles rectAngles)\r\n{\r\n    // get out data\r\n    int x = r.X;\r\n    int y = r.Y;\r\n    int width = r.Width;\r\n    int height = r.Height;\r\n    // adapt horizontal and vertical diameter if the rectangle is too little\r\n    if (width < horizontalDiameter)\r\n        horizontalDiameter = width;\r\n    if (height < verticalDiameter)\r\n        verticalDiameter = height;\r\n    /*\r\n     * The drawing is the following:\r\n     *\r\n     *             a\r\n     *      P______________Q\r\n     *    h /              \\ b\r\n     *   W /                \\R\r\n     *    |                  |\r\n     *  g |                  | c\r\n     *   V|                  |S\r\n     *    f\\                / d\r\n     *     U\\______________/T\r\n     *             e\r\n     */\r\n    bool tl = (rectAngles & RectAngles.TopLeft) != 0,\r\n        tr = (rectAngles & RectAngles.TopRight) != 0,\r\n        br = (rectAngles & RectAngles.BottomRight) != 0,\r\n        bl = (rectAngles & RectAngles.BottomLeft) != 0;\r\n    Point pointP = tl ?\r\n        new Point(x + horizontalDiameter / 2, y) :\r\n        new Point(x, y);\r\n    Point pointQ = tr ?\r\n        new Point(x + width - horizontalDiameter / 2 - 1, y) :\r\n        new Point(x + width - 1, y);\r\n    Point pointR = tr ?\r\n        new Point(x + width - 1, y + verticalDiameter / 2) :\r\n        pointQ;\r\n    Point pointS = br ?\r\n        new Point(x + width - 1, y + height - verticalDiameter / 2 - 1) :\r\n        new Point(x + width - 1, y + height - 1);\r\n    Point pointT = br ?\r\n        new Point(x + width - horizontalDiameter / 2 - 1) :\r\n        pointS;\r\n    Point pointU = bl ?\r\n        new Point(x + horizontalDiameter / 2, y + height - 1) :\r\n        new Point(x, y + height - 1);\r\n    Point pointV = bl ?\r\n        new Point(x, y + height - verticalDiameter / 2 - 1) :\r\n        pointU;\r\n    Point pointW = tl ?\r\n        new Point(x, y + verticalDiameter / 2) :\r\n        pointP;\r\n    using (GraphicsPath gp = new GraphicsPath())\r\n    {\r\n        // a\r\n        gp.AddLine(pointP, pointQ);\r\n        // b\r\n        if (tr)\r\n            gp.AddArc(x + width - horizontalDiameter - 1, y, horizontalDiameter, verticalDiameter, 270, 90);\r\n        // c\r\n        gp.AddLine(pointR, pointS);\r\n        // d\r\n        if (br)\r\n            gp.AddArc(x + width - horizontalDiameter - 1, y + height - verticalDiameter - 1, horizontalDiameter, verticalDiameter, 0, 90);\r\n        // e\r\n        gp.AddLine(pointT, pointU);\r\n        // f\r\n        if (bl)\r\n            gp.AddArc(x, y + height - verticalDiameter - 1, horizontalDiameter, verticalDiameter, 90, 90);\r\n        // g\r\n        gp.AddLine(pointV, pointW);\r\n        // h\r\n        if (tl)\r\n            gp.AddArc(x, y, horizontalDiameter, verticalDiameter, 180, 90);\r\n        // end\r\n        gp.CloseFigure();\r\n        // draw\r\n        if (b != null)\r\n            g.FillPath(b, gp);\r\n        if (p != null)\r\n            g.DrawPath(p, gp);\r\n    }\r\n}","protected override void OnPaint(PaintEventArgs e)\r\n{\r\n  // draw a rounded rectangle in the control area\r\n  e.Graphics.DrawAndFillRoundedRectangle(Pens.Black, Brushes.Yellow, new Rectangle(0, 0, Width, Height), 5, 5, RectAngles.All);\r\n}"]}