{"Name":"Clone","Description":"Allows you to clone an etire generic list of cloneable items.","Author":"Jeff Reddy","SubmittedOn":"8/19/2011 3:14:58 PM","Entries":["public static IList<T> Clone<T>(this IList<T> listToClone) where T:ICloneable {\r\n            return listToClone.Select(item => (T)item.Clone()).ToList();\r\n        }","public class Item :ICloneable {\r\n        public int ID { get; set; }\r\n        public string ItemName { get; set; }\r\n        public object Clone() {\r\n            return MemberwiseClone();\r\n        }\r\n    }\r\n\r\nstatic class CloneTest {\r\n        public static IList<T> Clone<T>(this IList<T> listToClone) where T:ICloneable {\r\n            return listToClone.Select(item => (T)item.Clone()).ToList();\r\n        }\r\n\r\n        public static void  RunTest(){\r\n            //Populate our initial list\r\n            var items = new List<Item> {new Item {ID = 1, ItemName = \"Item1\"}, \r\n                                        new Item {ID = 2, ItemName = \"Item2\"},\r\n                                        new Item {ID = 3, ItemName = \"Item3\"},\r\n                                        new Item {ID = 4, ItemName = \"Item4\"}};\r\n            //Create a Clone\r\n            var itemsClone = items.Clone();\r\n\r\n            //Baseline test, expect Match comparing 2nd item in list\r\n            Console.WriteLine(items[2] == items[2] ? \"Match\" : \"Different\");\r\n\r\n            //Clone test, expect Different comparing 2nd item of each\r\n            Console.WriteLine(items[2] == itemsClone[2] ? \"Match\" : \"Different\");\r\n        }\r\n    }\r\n\r\nstatic void Main() {\r\n            CloneTest.RunTest();\r\n            Console.ReadLine();\r\n            return;\r\n}\r\n\r\n\r\nRESULTS:\r\nMatch\r\nDifferent"]}