{"Name":"TakeUntil","Description":"The opposite of TakeWhile, inverts the expression and passes to TakeWhile so that instead of taking while an expression is true, you take until an expression is true.","Author":"James Michael Hare (BlackRabbitCoder)","SubmittedOn":"10/14/2010 6:13:25 PM","Entries":["using System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\n\r\npublic static class EnumerableExtensions\r\n{\r\n\t/// <summary>\r\n\t/// Continues processing items in a collection until the end condition is true.\r\n\t/// </summary>\r\n\t/// <typeparam name=\"T\">The type of the collection.</typeparam>\r\n\t/// <param name=\"collection\">The collection to iterate.</param>\r\n\t/// <param name=\"endCondition\">The condition that returns true if iteration should stop.</param>\r\n\t/// <returns>Iterator of sub-list.</returns>\r\n\tpublic static IEnumerable<T> TakeUntil<T>(this IEnumerable<T> collection, Predicate<T> endCondition)\r\n\t{\r\n\t\treturn collection.TakeWhile(item => !endCondition(item));\r\n\t}\r\n}","foreach(var item in list.TakeUntil(i => i.Name == null);"]}