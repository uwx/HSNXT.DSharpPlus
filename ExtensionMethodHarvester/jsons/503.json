{"Name":"IDictionary.GetValue","Description":"Better way to read a C# Dictionary","Author":"Kenneth Kasajian","SubmittedOn":"1/28/2015 11:14:51 PM","Entries":["/// <summary>\r\n        /// An alternative way to get a value from a dictionary.\r\n        /// The return value is a Lazy object containing the value if the value exists in the dictionary.\r\n        /// If it doesn't exist, the Lazy object isn't initialized.\r\n        /// Therefore, you can use the .IsValueCreated property of Lazy to determine if the object has a value.\r\n        /// In addition, if the dictionary did not have the key, .Value property of Lazy will be return the default value of the type.\r\n        /// such as null for string and 0 for int.\r\n        /// In some cases, simply using the .Value directly of or testing for null may be preferable to testing IsValueCreated\r\n        /// </summary>\r\n        public static Lazy<TValue> GetValue<TValue, TKey>(this IDictionary<TKey, TValue> dictionary, TKey key)\r\n        {\r\n            TValue retVal;\r\n            if (dictionary.TryGetValue(key, out retVal))\r\n            {\r\n                var retValRef = retVal;\r\n                var lazy = new Lazy<TValue>(() => retValRef);\r\n                retVal = lazy.Value;\r\n                return lazy;\r\n            }\r\n\r\n            return new Lazy<TValue>(() => default(TValue));\r\n        }","var d = new Dictionary<string, string> {{\"KeyApple\", \"ValueApple\"}, {\"KeyOrange\", \"ValueOrange\"}, {\"KeyPear\", \"ValuePear\"}};\r\n\r\n            Assert.AreEqual(\"ValueApple\", d.GetValue(\"KeyApple\").Value);\r\n            Assert.IsNull(d.GetValue(\"XXXXXXX\").Value);\r\n\r\n            var lazy1 = d.GetValue(\"KeyApple\");\r\n            Assert.IsTrue(lazy1.IsValueCreated);\r\n            Assert.AreEqual(\"ValueApple\", lazy1.Value);\r\n\r\n            var lazy2 = d.GetValue(\"XXXXXXX\");\r\n            Assert.IsFalse(lazy2.IsValueCreated);"]}