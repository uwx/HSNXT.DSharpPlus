{"Name":"IfNotNull","Description":"Returns a selected value when the source is not null; null otherwise.","Author":"Steven Jeuris","SubmittedOn":"11/15/2011 9:48:01 AM","Entries":["/// <summary>\r\n///   Returns a selected value when the source is not null; null otherwise.\r\n/// </summary>\r\n/// <typeparam name = \"T\">Type of the source object.</typeparam>\r\n/// <typeparam name = \"TInner\">Type of the object which the selector returns.</typeparam>\r\n/// <param name = \"source\">The source for this extension method.</param>\r\n/// <param name = \"selector\">A function which given the source object, returns a selected value.</param>\r\n/// <returns>The selected value when source is not null; null otherwise.</returns>\r\npublic static TInner IfNotNull<T, TInner>( this T source, Func<T, TInner> selector )\r\n\twhere T : class\r\n{\r\n\treturn source != null ? selector( source ) : default( TInner );\r\n}","class A\r\n{\r\n    public B Inner { get; set; }\r\n}\r\nA a = null;\r\nB getB = a.IfNotNull( x => x.Inner );"]}