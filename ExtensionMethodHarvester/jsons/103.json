{"Name":"Contains","Description":"Provides an overload to String.Contains to specify a StringComparison (i.e. allows for case-insensitive searches).","Author":"Brian Dukes","SubmittedOn":"7/25/2011 7:24:50 PM","Entries":["using System;\r\n\r\n/// <summary>\r\n/// Returns a value indicating whether the specified <see cref=\"string\"/> object occurs within the <paramref name=\"this\"/> string.\r\n/// A parameter specifies the type of search to use for the specified string.\r\n/// </summary>\r\n/// <param name=\"this\">The string to search in</param>\r\n/// <param name=\"value\">The string to seek</param>\r\n/// <param name=\"comparisonType\">One of the enumeration values that specifies the rules for the search</param>\r\n/// <exception cref=\"ArgumentNullException\"><paramref name=\"this\"/> or <paramref name=\"value\"/> is <c>null</c></exception>\r\n/// <exception cref=\"ArgumentException\"><paramref name=\"comparisonType\"/> is not a valid <see cref=\"StringComparison\"/> value</exception>\r\n/// <returns>\r\n/// <c>true</c> if the <paramref name=\"value\"/> parameter occurs within the <paramref name=\"this\"/> parameter, \r\n/// or if <paramref name=\"value\"/> is the empty string (<c>\"\"</c>); \r\n/// otherwise, <c>false</c>.\r\n/// </returns>\r\n/// <remarks>\r\n/// The <paramref name=\"comparisonType\"/> parameter specifies to search for the value parameter using the current or invariant culture, \r\n/// using a case-sensitive or case-insensitive search, and using word or ordinal comparison rules.\r\n/// </remarks>\r\npublic static bool Contains(this string @this, string value, StringComparison comparisonType)\r\n{\r\n    if (@this == null)\r\n    {\r\n        throw new ArgumentNullException(\"this\");\r\n    }\r\n\r\n    return @this.IndexOf(value, comparisonType) >= 0;\r\n}","// This example is based on the example from http://msdn.microsoft.com/en-us/library/ms224425.aspx\r\nusing System;\r\n\r\nclass Sample \r\n{\r\n    public static void Main() \r\n    {\r\n        // Define a string to search for.\r\n        // U+00c5 = LATIN CAPITAL LETTER A WITH RING ABOVE\r\n        string CapitalAWithRing = \"\\u00c5\"; \r\n        \r\n        // Define a string to search. \r\n        // The result of combining the characters LATIN SMALL LETTER A and COMBINING \r\n        // RING ABOVE (U+0061, U+030a) is linguistically equivalent to the character \r\n        // LATIN SMALL LETTER A WITH RING ABOVE (U+00e5).\r\n        string cat = \"A Cheshire c\" + \"\\u0061\\u030a\" + \"t\";\r\n        \r\n        StringComparison[] scValues = {\r\n            StringComparison.CurrentCulture,\r\n            StringComparison.CurrentCultureIgnoreCase,\r\n            StringComparison.InvariantCulture,\r\n            StringComparison.InvariantCultureIgnoreCase,\r\n            StringComparison.Ordinal,\r\n            StringComparison.OrdinalIgnoreCase };\r\n            \r\n        // Display the current culture because culture affects the result. For example, \r\n        // try this code example with the \"sv-SE\" (Swedish-Sweden) culture.\r\n        Thread.CurrentThread.CurrentCulture = new CultureInfo(\"en-US\");\r\n        Console.WriteLine(\"The current culture is \\\"{0}\\\" - {1}.\", \r\n                        Thread.CurrentThread.CurrentCulture.Name,\r\n                        Thread.CurrentThread.CurrentCulture.DisplayName);\r\n                        \r\n        // Display the string to search for and the string to search.\r\n        Console.WriteLine(\"Search for the string \\\"{0}\\\" in the string \\\"{1}\\\"\", \r\n                        CapitalAWithRing, cat);\r\n        Console.WriteLine();\r\n        \r\n        \r\n        foreach (StringComparison sc in scValues)\r\n        {\r\n            var isInString = cat.Contains(CapitalAWithRing, sc);\r\n            Console.WriteLine(\"Comparison: {0,-28} Is In String?: {1}\", sc, isInString);\r\n        }\r\n    }\r\n}"]}