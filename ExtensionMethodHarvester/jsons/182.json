{"Name":"With and Without","Description":"Fake immutability in an existing list class by adding a \"With\" and \"Without\" method","Author":"unknown","SubmittedOn":"2/8/2008 4:35:29 PM","Entries":["public static class ListExtensions\r\n{\r\n    public static TList With<TList, T>(this TList list, T item) where TList : IList<T>, new()\r\n    {\r\n        TList l = new TList();\r\n\r\n        foreach (T i in list)\r\n        {\r\n            l.Add(i);\r\n        }\r\n        l.Add(item);\r\n\r\n        return l;\r\n    }\r\n\r\n    public static TList Without<TList, T>(this TList list, T item) where TList : IList<T>, new()\r\n    {\r\n        TList l = new TList();\r\n\r\n        foreach (T i in list.Where(n => !n.Equals(item)))\r\n        {\r\n            l.Add(i);\r\n        }\r\n\r\n        return l;\r\n    }\r\n}","List<int> nums = new List<int>() { 1, 2, 3, 4, 5 };\r\n\r\nforeach (int i in nums.With(6))\r\n{\r\n    Console.WriteLine(i);\r\n}\r\n\r\nforeach (int i in nums.Without(3))\r\n{\r\n    Console.WriteLine(i);\r\n}"]}