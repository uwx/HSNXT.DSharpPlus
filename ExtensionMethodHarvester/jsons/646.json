{"Name":"AsSequenceTo","Description":"Creates a numeric list of integers starting at the current instance and ending at the maximum value.","Author":"Duane Wingett","SubmittedOn":"2/25/2016 11:12:35 AM","Entries":["using System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace IntegerExtensions\r\n{\r\n    /// <summary>\r\n    /// Contains extension methods for Lists of integers\r\n    /// </summary>\r\n    public static class IntegerExtensions\r\n    {\r\n\r\n        /// <summary>\r\n        /// Creates a numeric list of integers starting at the current instance and ending \r\n        /// at the maximum value.\r\n        /// </summary>\r\n        /// <param name=\"instance\">The instance.</param>\r\n        /// <param name=\"maxValue\">The initial value.</param>\r\n        /// <returns></returns>\r\n        public static List<int> AsSequenceTo(this int instance, int maxValue)\r\n        {\r\n            // Validate arguments\r\n            if (maxValue < instance) throw new ArgumentOutOfRangeException(\"maxValue\", maxValue, \"maxValue must not be less than the instance. \");\r\n\r\n            int count = (maxValue - instance + 1);\r\n            return Enumerable.Range(instance, count).ToList();\r\n        }\r\n    }\r\n}","[TestMethod]\r\n        public void AsSequenceTo_EndsAtMximumValue()\r\n        {\r\n            // ARRANGE\r\n            const int initialValue = 3;\r\n            const int maximumValue = 5;\r\n            const int expectedEnd = maximumValue;\r\n\r\n            // ACT\r\n            var result = initialValue.AsSequenceTo(maximumValue);\r\n            var actual = result.Last();\r\n\r\n            // ASSERT\r\n            Assert.AreEqual(expectedEnd, actual);\r\n        }"]}