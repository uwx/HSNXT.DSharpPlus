{"Name":"ReplaceIgnoreCase","Description":"ReplaceIgnoreCase","Author":"Unknown","SubmittedOn":"7/25/2016 11:07:08 PM","Entries":["/// <summary>\r\n        /// Extension method to do case-insensitive string replace\r\n        /// </summary>\r\n        /// <param name=\"str\">        </param>\r\n        /// <param name=\"pattern\">    </param>\r\n        /// <param name=\"replacement\"></param>\r\n        /// <returns></returns>\r\n        public static string ReplaceIgnoreCase(this string str, string pattern, string replacement)\r\n        {\r\n            int count, position0, position1;\r\n            count = position0 = position1 = 0;\r\n            string upperString = str.ToUpper();\r\n            string upperPattern = pattern.ToUpper();\r\n            int inc = (str.Length / pattern.Length) *\r\n                      (replacement.Length - pattern.Length);\r\n            char[] chars = new char[str.Length + Math.Max(0, inc)];\r\n            while ((position1 = upperString.IndexOf(upperPattern,\r\n                                              position0)) != -1)\r\n            {\r\n                for (int i = position0; i < position1; ++i)\r\n                    chars[count++] = str[i];\r\n                for (int i = 0; i < replacement.Length; ++i)\r\n                    chars[count++] = replacement[i];\r\n                position0 = position1 + pattern.Length;\r\n            }\r\n            if (position0 == 0) return str;\r\n            for (int i = position0; i < str.Length; ++i)\r\n                chars[count++] = str[i];\r\n            return new string(chars, 0, count);\r\n        }","var @string = ReplaceIgnoreCase(\"Test replace, test replace.\", \"Test\", \"tested\");"]}