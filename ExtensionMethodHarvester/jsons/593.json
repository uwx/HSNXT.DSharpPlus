{"Name":"Or (with explicit reference for strings)","Description":"Returns the object if it's not null or the first object which is not null, With explicit reference for strings","Author":"D.Magician","SubmittedOn":"12/10/2014 1:49:16 PM","Entries":["/// <summary>\r\n\t\t///Returns the object if it's not null or the first object which is not null.\r\n\t\t/// Original Idea: Weidling C\r\n\t\t/// </summary>\r\n\t\t/// <typeparam name=\"T\">Type of origination</typeparam>\r\n\t\t/// <param name=\"this\">current object to be OR'ed</param>\r\n\t\t/// <param name=\"oValues\">Array of type <c>T</c> for the rest of the list</param>\r\n\t\t/// <returns><see cref=\"\"/> Item - or if null/empty move to next item chech and return &lt;-- Looping trought all items in oValues if all are empty, returnds default <see cref=\"T\"/>value</returns>\r\n\t\tpublic static T Or<T>(this T @this, params T[] oValues)\r\n\t\t{\r\n\t\t\tforeach (var item in oValues)\r\n\t\t\t{\r\n\t\t\t\tif (@this is string)\r\n\t\t\t\t{\r\n\t\t\t\t\tif (string.IsNullOrWhiteSpace(@this.ToString()) == false)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn (@this);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\t// ReSharper disable once CompareNonConstrainedGenericWithNull\r\n\t\t\t\t\tif (item != null)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn (item);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn default(T);\r\n\t\t}","string s = GetValue(); // s == null\r\nConsole.WriteLine(s.Or(\"value not found\")):"]}