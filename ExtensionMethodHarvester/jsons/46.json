{"Name":"OrderBy","Description":"OrderBy is nice, except if you want to sort by multiple properties or want an easy way to distinguish between ascending and descending.","Author":"Adam Weigert","SubmittedOn":"3/3/2008 4:49:06 PM","Entries":["public static IOrderedEnumerable<TSource> OrderBy<TSource, TKey>(this IEnumerable<TSource> enumerable, Func<TSource, TKey> keySelector, bool descending)\r\n{\r\n    if (enumerable == null)\r\n    {\r\n        return null;\r\n    }\r\n\r\n    if (descending)\r\n    {\r\n        return enumerable.OrderByDescending(keySelector);\r\n    }\r\n\r\n    return enumerable.OrderBy(keySelector);\r\n}\r\n\r\npublic static IOrderedEnumerable<TSource> OrderBy<TSource>(this IEnumerable<TSource> enumerable, Func<TSource, IComparable> keySelector1, Func<TSource, IComparable> keySelector2, params Func<TSource, IComparable>[] keySelectors)\r\n{\r\n    if (enumerable == null)\r\n    {\r\n        return null;\r\n    }\r\n\r\n    IEnumerable<TSource> current = enumerable;\r\n\r\n    if (keySelectors != null)\r\n    {\r\n        for (int i = keySelectors.Length - 1; i >= 0; i--)\r\n        {\r\n            current = current.OrderBy(keySelectors[i]);\r\n        }\r\n    }\r\n\r\n    current = current.OrderBy(keySelector2);\r\n\r\n    return current.OrderBy(keySelector1);\r\n}\r\n\r\npublic static IOrderedEnumerable<TSource> OrderBy<TSource>(this IEnumerable<TSource> enumerable, bool descending, Func<TSource, IComparable> keySelector, params Func<TSource, IComparable>[] keySelectors)\r\n{\r\n    if (enumerable == null)\r\n    {\r\n        return null;\r\n    }\r\n\r\n    IEnumerable<TSource> current = enumerable;\r\n    \r\n    if (keySelectors != null)\r\n    {\r\n        for (int i = keySelectors.Length - 1; i >= 0; i--)\r\n        {\r\n            current = current.OrderBy(keySelectors[i], descending);\r\n        }\r\n    }\r\n\r\n    return current.OrderBy(keySelector, descending);\r\n}","bool descending = (sortDirection = SortDirection.Descending);\r\n\r\nPersonGridView.DataSource = persons.OrderBy(descending, p => p.Age, p => p.Name, p => p.Gender).ToList();"]}