{"Name":"GetMatchValue","Description":"Returns a collection of string that matched on the pattern.","Author":"Totet","SubmittedOn":"4/1/2015 6:50:20 AM","Entries":["public static class RegexHelper\r\n    {\r\n        public static IEnumerable<string> GetMatchValue(this string rawString, string pattern, bool uniqueOnly = false)\r\n        {\r\n            MatchCollection matches = Regex.Matches(rawString, pattern, RegexOptions.IgnoreCase);\r\n            IEnumerable<string> result = matches.Cast<Match>().Select(m => m.Value);\r\n            if (uniqueOnly) return result.Distinct().ToList<string>();\r\n\r\n            return result.ToList<string>();\r\n        }\r\n    }","[TestClass]\r\n    public class RegexHelperTest\r\n    {\r\n        [TestMethod]\r\n        public void GetRegexMatches()\r\n        {\r\n            const string input = \"the quick big brown fox jumps over the lazy dog\";\r\n            const string pattern = @\"\\b[a-zA-z]{3}\\b\";      // find three-letter words\r\n            const int expectedMatched = 5;                  // the, big, fox, the, dog\r\n\r\n            IEnumerable<string> result = input.GetMatchValue(pattern);\r\n\r\n            Assert.AreEqual(result.Count(), expectedMatched);\r\n        }\r\n\r\n        [TestMethod]\r\n        public void GetRegexUniqueMatches()\r\n        {\r\n            const string input = \"the quick big brown fox jumps over the lazy dog\";\r\n            const string pattern = @\"\\b[a-zA-z]{3}\\b\";      // find three-letter words\r\n            const int expectedMatched = 4;                  // the, big, fox, dog\r\n\r\n            IEnumerable<string> result = input.GetMatchValue(pattern, true);\r\n\r\n            Assert.AreEqual(result.Count(), expectedMatched);\r\n        }\r\n    }"]}