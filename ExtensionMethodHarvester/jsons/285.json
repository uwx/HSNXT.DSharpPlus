{"Name":"HandleOnce","Description":"Creates a wrapper for the given event handler which unsubscribes from the event source immediately prior to calling the given event handler.","Author":"Wayne Bloss","SubmittedOn":"3/26/2011 10:02:08 PM","Entries":["/// <summary>\r\n/// Creates a wrapper for the given event handler which unsubscribes from the event source immediately prior to calling the given event handler.\r\n/// </summary>\r\n/// <param name=\"handler\">Handler that will be wrapped.</param>\r\n/// <param name=\"remove\">Action to remove the wrapped handler. (wrapper =&gt; source.MyEvent -= wrapper);</param>\r\n/// <returns></returns>\r\n/// <example>\r\n/// <code>\r\n/// source.TestEvent += new EventHandler(source_TestEvent)\r\n///\t\t.HandleOnce(wrapper => source.TestEvent -= wrapper);\r\n///\t</code>\r\n/// </example>\r\npublic static EventHandler HandleOnce(this EventHandler handler, Action<EventHandler> remove)\r\n{\r\n\tEventHandler wrapper = null;\r\n\twrapper = delegate(object sender, EventArgs e)\r\n\t{\r\n\t\tremove(wrapper);\r\n\t\thandler(sender, e);\r\n\t};\r\n\treturn wrapper;\r\n}","source.TestEvent += new EventHandler(source_TestEvent)\r\n   .HandleOnce(wrapper => source.TestEvent -= wrapper);"]}