{"Name":"Filter","Description":"Allows you to filter an IEnumerable<T>","Author":"Jeff Reddy","SubmittedOn":"8/9/2011 6:06:20 PM","Entries":["public static IEnumerable<T> Filter<T>(this IEnumerable<T> list, Func<T, bool> filterParam) {\r\n            return list.Where(filterParam);\r\n        }","static void Main() {\r\n\r\n            var items = new List<TestItem> {\r\n                    new TestItem {ItemID = 1, ItemName = \"TestItem\"},\r\n                    new TestItem {ItemID = 2, ItemName = \"Wigit\"},\r\n                    new TestItem {ItemID = 3, ItemName = \"TestItem2\"},\r\n                    new TestItem {ItemID = 4, ItemName = \"Foo\"},\r\n                    new TestItem {ItemID = 5, ItemName = \"Bar\"},\r\n                    new TestItem {ItemID = 6, ItemName = \"TestFooBarItem\"}\r\n            };\r\n\r\n            Console.WriteLine(\"Items starting with Test using delegate\");\r\n            Func<TestItem, bool> itemNameFilter = delegate(TestItem testItem) { return testItem.ItemName.StartsWith(\"Test\"); };\r\n            foreach (var testItem in items.Filter(itemNameFilter)) {\r\n                Console.WriteLine(testItem.ItemName);\r\n            }\r\n\r\n            Console.WriteLine(\"Items with ItemName containing Item and ItemID > 2 using Lamda Expression\");\r\n            foreach (var testItem in items.Filter(x => x.ItemName.StartsWith(\"Test\") && x.ItemID > 2)) {\r\n                Console.WriteLine(testItem.ItemName);\r\n            }\r\n\r\n            Console.ReadLine();\r\n        }"]}