{"Name":"GetBoolean(string fieldName), GetDateTime(string fieldName), etc...","Description":"Use the Get[Type] functions that are part of the IDataReader but by passing the field name as a string as opposed to the field ordinal as int. Allows assigning default values for null values returned by the datareader.","Author":"Jeff Reddy","SubmittedOn":"8/9/2011 6:16:06 PM","Entries":["/// <summary>\r\n        /// This method extends the GetBoolean method of the data reader to allow calling by the field name\r\n        /// </summary>\r\n        /// <param name=\"dataReader\">The datareader object we are extending</param>\r\n        /// <param name=\"fieldName\">The field name that we are getting the Boolean value for</param>\r\n        /// <returns></returns>\r\n        public static bool GetBoolean(this IDataReader dataReader, string fieldName) {\r\n            var fieldOrdinal = dataReader.GetOrdinal(fieldName);\r\n            var retVal = false;\r\n\r\n            if(!dataReader.IsDBNull(fieldOrdinal)) {\r\n                try {\r\n                    retVal = dataReader.GetBoolean(fieldOrdinal);\r\n                }\r\n                catch(InvalidCastException) {\r\n                    //We will swallow this exception as it's expected if our value has a dataType of bit. \r\n                    //We will try and handle that by casting to an Int16.\r\n                    //If it fails here, we will allow the exception to get thrown\r\n                    return (dataReader.GetInt16(fieldOrdinal) == 1);\r\n                }\r\n\r\n            }\r\n\r\n            return retVal;\r\n        }\r\n\r\n        /// <summary>\r\n        /// This method extends the GetDateTime method of the data reader to allow calling by the field name\r\n        /// </summary>\r\n        /// <param name=\"dataReader\">The datareader object we are extending</param>\r\n        /// <param name=\"fieldName\">The field name that we are getting the DateTime value for</param>\r\n        /// <param name=\"defaultValue\"></param>\r\n        /// <returns></returns>\r\n        public static DateTime GetDateTime(this IDataReader dataReader, string fieldName, DateTime defaultValue = default(DateTime)) {\r\n            var fieldOrdinal = dataReader.GetOrdinal(fieldName);\r\n            return dataReader.IsDBNull(fieldOrdinal) ? defaultValue : dataReader.GetDateTime(fieldOrdinal);\r\n        }\r\n\r\n        /// <summary>\r\n        /// This method extends the GetDecimal method of the data reader to allow calling by the field name\r\n        /// </summary>\r\n        /// <param name=\"dataReader\">The datareader object we are extending</param>\r\n        /// <param name=\"fieldName\">The field name that we are getting the Decimal value for</param>\r\n        /// <param name=\"defaultValue\"></param>\r\n        /// <returns></returns>\r\n        public static Decimal GetDecimal(this IDataReader dataReader, string fieldName, Decimal defaultValue = 0m) {\r\n            var fieldOrdinal = dataReader.GetOrdinal(fieldName);\r\n            return dataReader.IsDBNull(fieldOrdinal) ? defaultValue : dataReader.GetDecimal(fieldOrdinal);\r\n        }\r\n\r\n        /// <summary>\r\n        /// This method extends the GetDouble method of the data reader to allow calling by the field name\r\n        /// </summary>\r\n        /// <param name=\"dataReader\">The datareader object we are extending</param>\r\n        /// <param name=\"fieldName\">The field name that we are getting the Double value for</param>\r\n        /// <param name=\"defaultValue\"></param>\r\n        /// <returns></returns>\r\n        public static double GetDouble(this IDataReader dataReader, string fieldName, double defaultValue = 0d) {\r\n            var fieldOrdinal = dataReader.GetOrdinal(fieldName);\r\n            return dataReader.IsDBNull(fieldOrdinal) ? defaultValue : dataReader.GetDouble(fieldOrdinal);\r\n        }\r\n\r\n        /// <summary>\r\n        /// This method extends the GetFloat method of the data reader to allow calling by the field name\r\n        /// </summary>\r\n        /// <param name=\"dataReader\">The datareader object we are extending</param>\r\n        /// <param name=\"fieldName\">The field name that we are getting the Float value for</param>\r\n        /// <param name=\"defaultValue\"></param>\r\n        /// <returns></returns>\r\n        public static float GetFloat(this IDataReader dataReader, string fieldName, float defaultValue = 0f) {\r\n            var fieldOrdinal = dataReader.GetOrdinal(fieldName);\r\n            return dataReader.IsDBNull(fieldOrdinal) ? defaultValue : dataReader.GetFloat(fieldOrdinal);\r\n        }\r\n\r\n        /// <summary>\r\n        /// This method extends the GetGuid method of the data reader to allow calling by the field name\r\n        /// </summary>\r\n        /// <param name=\"dataReader\">The datareader object we are extending</param>\r\n        /// <param name=\"fieldName\">The field name that we are getting the Guid value for</param>\r\n        /// <param name=\"defaultValue\"></param>\r\n        /// <returns></returns>\r\n        public static Guid GetGuid(this IDataReader dataReader, string fieldName, Guid defaultValue = default(Guid)) {\r\n            var fieldOrdinal = dataReader.GetOrdinal(fieldName);\r\n            return dataReader.IsDBNull(fieldOrdinal) ? defaultValue : dataReader.GetGuid(fieldOrdinal);\r\n        }\r\n\r\n        /// <summary>\r\n        /// This method extends the GetInt16 method of the data reader to allow calling by the field name\r\n        /// </summary>\r\n        /// <param name=\"dataReader\">The datareader object we are extending</param>\r\n        /// <param name=\"fieldName\">The field name that we are getting the Int16 value for</param>\r\n        /// <param name=\"defaultValue\"></param>\r\n        /// <returns></returns>\r\n        public static Int16 GetInt16(this IDataReader dataReader, string fieldName, Int16 defaultValue) {\r\n            var fieldOrdinal = dataReader.GetOrdinal(fieldName);\r\n            return dataReader.IsDBNull(fieldOrdinal) ? defaultValue : dataReader.GetInt16(fieldOrdinal);\r\n        }\r\n\r\n        /// <summary>\r\n        /// This method extends the GetInt32 method of the data reader to allow calling by the field name\r\n        /// </summary>\r\n        /// <param name=\"dataReader\">The datareader object we are extending</param>\r\n        /// <param name=\"fieldName\">The field name that we are getting the Int32 value for</param>\r\n        /// <param name=\"defaultValue\"></param>\r\n        /// <returns></returns>\r\n        public static Int32 GetInt32(this IDataReader dataReader, string fieldName, Int32 defaultValue = 0) {\r\n            var fieldOrdinal = dataReader.GetOrdinal(fieldName);\r\n            return dataReader.IsDBNull(fieldOrdinal) ? defaultValue : dataReader.GetInt32(fieldOrdinal);\r\n        }\r\n\r\n        /// <summary>\r\n        /// This method extends the GetInt64 method of the data reader to allow calling by the field name\r\n        /// </summary>\r\n        /// <param name=\"dataReader\">The datareader object we are extending</param>\r\n        /// <param name=\"fieldName\">The field name that we are getting the Int64 value for</param>\r\n        /// <param name=\"defaultValue\"></param>\r\n        /// <returns></returns>\r\n        public static Int64 GetInt64(this IDataReader dataReader, string fieldName, Int64 defaultValue = 0) {\r\n            var fieldOrdinal = dataReader.GetOrdinal(fieldName);\r\n            return dataReader.IsDBNull(fieldOrdinal) ? defaultValue : dataReader.GetInt64(fieldOrdinal);\r\n        }\r\n\r\n        /// <summary>\r\n        /// This method extends the GetString method of the data reader to allow calling by the field name\r\n        /// </summary>\r\n        /// <param name=\"dataReader\">The datareader object we are extending</param>\r\n        /// <param name=\"fieldName\">The field name that we are getting the string value for</param>\r\n        /// <param name=\"defaultValue\"></param>\r\n        /// <returns></returns>\r\n        public static string GetString(this IDataReader dataReader, string fieldName, string defaultValue = \"\") {\r\n            var fieldOrdinal = dataReader.GetOrdinal(fieldName);\r\n            return dataReader.IsDBNull(fieldOrdinal) ? defaultValue : dataReader.GetString(fieldOrdinal);\r\n        }","var itemID = datareader.GetInt32(\"ItemID\");\r\n\r\n//With Default\r\n\r\nvar ItemName = datareader.GetString(\"ItemName\", \"Unknown\");"]}