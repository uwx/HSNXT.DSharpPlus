{"Name":"GetAttribute","Description":"Makes it easier to retrieve custom attributes of a given type from a reflected type.","Author":"James Michael Hare (Black Rabbit Coder)","SubmittedOn":"10/14/2010 6:24:27 PM","Entries":["using System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\n\r\n/// <summary>\r\n/// Extension methods for the Type class\r\n/// </summary>\r\npublic static class TypeExtensions\r\n{\r\n\t/// <summary>\r\n\t/// Loads the custom attributes from the type\r\n\t/// </summary>\r\n\t/// <typeparam name=\"T\">The type of the custom attribute to find.</typeparam>\r\n\t/// <param name=\"typeWithAttributes\">The calling assembly to search.</param>\r\n\t/// <returns>The custom attribute of type T, if found.</returns>\r\n\tpublic static T GetAttribute<T>(this Type typeWithAttributes)\r\n\t\twhere T : Attribute\r\n\t{\r\n\t\treturn GetAttributes<T>(typeWithAttributes).FirstOrDefault();\r\n\t}\r\n\r\n\t/// <summary>\r\n\t/// Loads the custom attributes from the type\r\n\t/// </summary>\r\n\t/// <typeparam name=\"T\">The type of the custom attribute to find.</typeparam>\r\n\t/// <param name=\"typeWithAttributes\">The calling assembly to search.</param>\r\n\t/// <returns>An enumeration of attributes of type T that were found.</returns>\r\n\tpublic static IEnumerable<T> GetAttributes<T>(this Type typeWithAttributes)\r\n\t\twhere T : Attribute\r\n\t{\r\n\t\t// Try to find the configuration attribute for the default logger if it exists\r\n\t\tobject[] configAttributes = Attribute.GetCustomAttributes(typeWithAttributes,\r\n\t\t\ttypeof(T), false);\r\n\r\n\t\tif (configAttributes != null)\r\n\t\t{\r\n\t\t\tforeach (T attribute in configAttributes)\r\n\t\t\t{\r\n\t\t\t\tyield return attribute;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}","var attribute = typeof(SomeType).GetAttribute<XmlSerializationAttribute>();"]}