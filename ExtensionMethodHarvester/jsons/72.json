{"Name":"Slice<T>(int start, int end)","Description":"Returns the range of elements between the specified start and end indexes. Negative numbers count from the end, rather than the start, of the sequence. Values of 'end' larger than the actual sequence are truncated and do not cause index-out-of-bounds exceptions. Functionally very similar to Python's list[x:y] slices.","Author":"Joe Smith","SubmittedOn":"10/17/2010 3:23:34 AM","Entries":["public static IEnumerable<T> Slice<T>(this IEnumerable<T> collection, int start, int end)\r\n{\r\n    int index = 0;\r\n    int count = 0;\r\n\r\n    if (collection == null)\r\n        throw new ArgumentNullException(\"collection\");\r\n\r\n    // Optimise item count for ICollection interfaces.\r\n    if (collection is ICollection<T>)\r\n        count = ((ICollection<T>)collection).Count;\r\n    else if (collection is ICollection)\r\n        count = ((ICollection)collection).Count;\r\n    else\r\n        count = collection.Count();\r\n\r\n    // Get start/end indexes, negative numbers start at the end of the collection.\r\n    if (start < 0)\r\n        start += count;\r\n\r\n    if (end < 0)\r\n        end += count;\r\n\r\n    foreach (var item in collection)\r\n    {\r\n        if (index >= end)\r\n        yield break;\r\n\r\n        if (index >= start)\r\n        yield return item;\r\n\r\n        ++index;\r\n    }\r\n}","char[] h = \"0123456789abcdef\".ToCharArray();\r\n\r\nvar a = h.Slice(0, 3);    // returns { 0, 1, 2 }\r\nvar b = h.Slice(4, 9);    // returns { 4, 5, 6, 7, 8 }\r\nvar c = h.Slice(10, 100); // returns { a, b, c, d, e, f }\r\nvar d = h.Slice(5, 5);    // returns { }\r\nvar e = h.Slice(-10, -5); // returns { 6, 7, 8, 9, a }"]}