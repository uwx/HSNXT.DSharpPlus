{"Name":"Encrypt & Decrypt","Description":"Encrypt and decrypt a string using the RSACryptoServiceProvider.","Author":"Mark de Rover","SubmittedOn":"1/2/2008 10:42:13 AM","Entries":["using System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Text;\r\nusing System.Security.Cryptography;\r\n\r\nnamespace Extensions\r\n{\r\n    public static class Extensions\r\n    {\r\n        /// <summary>\r\n        /// Encryptes a string using the supplied key. Encoding is done using RSA encryption.\r\n        /// </summary>\r\n        /// <param name=\"stringToEncrypt\">String that must be encrypted.</param>\r\n        /// <param name=\"key\">Encryptionkey.</param>\r\n        /// <returns>A string representing a byte array separated by a minus sign.</returns>\r\n        /// <exception cref=\"ArgumentException\">Occurs when stringToEncrypt or key is null or empty.</exception>\r\n        public static string Encrypt(this string stringToEncrypt, string key)\r\n        {\r\n            if (string.IsNullOrEmpty(stringToEncrypt))\r\n            {\r\n                throw new ArgumentException(\"An empty string value cannot be encrypted.\");\r\n            }\r\n\r\n            if (string.IsNullOrEmpty(key))\r\n            {\r\n                throw new ArgumentException(\"Cannot encrypt using an empty key. Please supply an encryption key.\");\r\n            }\r\n\r\n            CspParameters cspp = new CspParameters();\r\n            cspp.KeyContainerName = key;\r\n\r\n            RSACryptoServiceProvider rsa = new RSACryptoServiceProvider(cspp);\r\n            rsa.PersistKeyInCsp = true;\r\n\r\n            byte[] bytes = rsa.Encrypt(System.Text.UTF8Encoding.UTF8.GetBytes(stringToEncrypt), true);\r\n\r\n            return BitConverter.ToString(bytes);\r\n        }\r\n\r\n        /// <summary>\r\n        /// Decryptes a string using the supplied key. Decoding is done using RSA encryption.\r\n        /// </summary>\r\n        /// <param name=\"stringToDecrypt\">String that must be decrypted.</param>\r\n        /// <param name=\"key\">Decryptionkey.</param>\r\n        /// <returns>The decrypted string or null if decryption failed.</returns>\r\n        /// <exception cref=\"ArgumentException\">Occurs when stringToDecrypt or key is null or empty.</exception>\r\n        public static string Decrypt(this string stringToDecrypt, string key)\r\n        {\r\n            string result = null;\r\n\r\n            if (string.IsNullOrEmpty(stringToDecrypt))\r\n            {\r\n                throw new ArgumentException(\"An empty string value cannot be encrypted.\");\r\n            }\r\n\r\n            if (string.IsNullOrEmpty(key))\r\n            {\r\n                throw new ArgumentException(\"Cannot decrypt using an empty key. Please supply a decryption key.\");\r\n            }\r\n\r\n            try\r\n            {\r\n                CspParameters cspp = new CspParameters();\r\n                cspp.KeyContainerName = key;\r\n\r\n                RSACryptoServiceProvider rsa = new RSACryptoServiceProvider(cspp);\r\n                rsa.PersistKeyInCsp = true;\r\n\r\n                string[] decryptArray = stringToDecrypt.Split(new string[] { \"-\" }, StringSplitOptions.None);\r\n                byte[] decryptByteArray = Array.ConvertAll<string, byte>(decryptArray, (s => Convert.ToByte(byte.Parse(s, System.Globalization.NumberStyles.HexNumber))));\r\n\r\n\r\n                byte[] bytes = rsa.Decrypt(decryptByteArray, true);\r\n\r\n                result = System.Text.UTF8Encoding.UTF8.GetString(bytes);\r\n\r\n            }\r\n            finally \r\n            {\r\n                // no need for further processing\r\n            }\r\n\r\n            return result;\r\n        }\r\n\r\n        \r\n    }\r\n}","string secret = \"My Secret\";\r\nstring encoded = secret.Encrypt(\"mykey\");\r\nstring decoded = encoded.Decrypt(\"mykey\");"]}