{"Name":"NextAnniversary","Description":"Calculates the next anniversary of an event after the initial date on the Gregorian calendar. Use the original event date or the event month/event day as a parameters. The optional parameter, preserveMonth will determine how to handle an event date of 2/29. Set to true will use February 28 for a standard year anniversary and set to false will use March 1 for a standard year anniversary.","Author":"Jeff Banjavcic","SubmittedOn":"3/15/2017 4:03:50 AM","Entries":["public static class DateExtensions\r\n{\r\n    static public DateTime NextAnniversary(this DateTime dt, DateTime eventDate, bool preserveMonth = false)\r\n    {\r\n        DateTime calcDate;\r\n\r\n        if (dt.Date < eventDate.Date) // Return the original event date if it occurs later than initial input date.\r\n            return new DateTime(eventDate.Year, eventDate.Month, eventDate.Day, 0, 0, 0, dt.Kind);\r\n\r\n        calcDate = new DateTime(dt.Year + (dt.Month < eventDate.Month || dt.Month == eventDate.Month && dt.Day < eventDate.Day ? 0 : 1), eventDate.Month, 1, 0, 0, 0, dt.Kind).AddDays(eventDate.Day - 1);\r\n\r\n        if (eventDate.Month == calcDate.Month || !preserveMonth)\r\n            return calcDate;\r\n        else\r\n            return calcDate.AddYears(dt.Month == 2 && dt.Day == 28 ? 1 : 0).AddDays(-1);\r\n    }\r\n    static public DateTime NextAnniversary(this DateTime dt, int eventMonth, int eventDay, bool preserveMonth = false)\r\n    {\r\n        DateTime calcDate;\r\n\r\n        if (eventDay > 31 || eventDay < 1 || eventMonth > 12 || eventMonth < 1 ||\r\n           ((eventMonth == 4 || eventMonth == 6 || eventMonth == 9 || eventMonth == 11) && eventDay > 30) ||\r\n           (eventMonth == 2 && eventDay > 29))\r\n            throw new Exception(\"Invalid combination of Event Year and Event Month.\");\r\n\r\n        calcDate = new DateTime(dt.Year + (dt.Month < eventMonth || dt.Month == eventMonth && dt.Day < eventDay ? 0 : 1), eventMonth, 1, 0, 0, 0, dt.Kind).AddDays(eventDay - 1);\r\n\r\n        if (eventMonth == calcDate.Month || !preserveMonth)\r\n            return calcDate;\r\n        else\r\n            return calcDate.AddYears(dt.Month == 2 && dt.Day == 28 ? 1 : 0).AddDays(-1);\r\n    }\r\n}","DateTime hireDate = new DateTime(1998, 10, 5);\r\nDateTime nextHireAnnivers = DateTime.Now.NextAnniversary(hireDate); // Returns the next occurance of October 5.\r\nDateTime nextAnnivers = DateTime.Now.NextAnniversary(12, 16); // Returns the next occurance of December 16.\r\nDateTime leapDayEvent = DateTime.Now.NextAnniversary(2, 29, true); // Returns the next occurance of February 28 or February 29 depending on if the next anniversary is in a leap year."]}