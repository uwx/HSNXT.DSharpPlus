{"Name":"Zip","Description":"Merges three sequences by using the specified predicate function.","Author":"Steven Jeuris","SubmittedOn":"11/15/2011 9:21:22 AM","Entries":["public static IEnumerable<TResult> Zip<TFirst, TSecond, TThird, TResult>(\r\n\tthis IEnumerable<TFirst> first,\r\n\tIEnumerable<TSecond> second,\r\n\tIEnumerable<TThird> third,\r\n\tFunc<TFirst, TSecond, TThird, TResult> resultSelector )\r\n{\r\n\tContract.Requires( first != null && second != null && third != null && resultSelector != null );\r\n\r\n\tusing ( IEnumerator<TFirst> iterator1 = first.GetEnumerator() )\r\n\tusing ( IEnumerator<TSecond> iterator2 = second.GetEnumerator() )\r\n\tusing ( IEnumerator<TThird> iterator3 = third.GetEnumerator() )\r\n\t{\r\n\t\twhile ( iterator1.MoveNext() && iterator2.MoveNext() && iterator3.MoveNext() )\r\n\t\t{\r\n\t\t\tyield return resultSelector( iterator1.Current, iterator2.Current, iterator3.Current );\r\n\t\t}\r\n\t}\r\n}","byte[] reds = new { 0, 1, 2 };\r\nbyte[] greens = new { 3, 4, 5 };\r\nbyte[] blues = new { 6, 7, 8 };\r\nvar mergedColors = reds.Zip( greens, blues, Color.FromRgb );"]}