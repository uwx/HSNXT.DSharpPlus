{"Name":"ConcatItem / ConcatTo","Description":"Concats a single item to an IEnumerable","Author":"Bart Kemps","SubmittedOn":"12/6/2016 4:52:38 PM","Entries":["public static class Utility\r\n{\r\n    /// <summary>\r\n    /// Adds the specified element at the end of the IEnummerable.\r\n    /// </summary>\r\n    /// <typeparam name=\"T\">The type of elements the IEnumerable contans.</typeparam>\r\n    /// <param name=\"target\">The target.</param>\r\n    /// <param name=\"item\">The item to be concatenated.</param>\r\n    /// <returns>An IEnumerable, enumerating first the items in the existing enumerable</returns>\r\n    public static IEnumerable<T> ConcatItem<T>(this IEnumerable<T> target, T item)\r\n    {\r\n        foreach (T t in target) yield return t;\r\n        yield return item;\r\n    }\r\n\r\n    /// <summary>\r\n    /// Inserts the specified element at the start of the IEnumerable.\r\n    /// </summary>\r\n    /// <typeparam name=\"T\">The type of elements the IEnumerable contans.</typeparam>\r\n    /// <param name=\"target\">The IEnummerable.</param>\r\n    /// <param name=\"item\">The item to be concatenated.</param>\r\n    /// <returns>An IEnumerable, enumerating first the target elements, and then the new element.</returns>\r\n    public static IEnumerable<T> ConcatTo<T>(this IEnumerable<T> target, T item)\r\n    {\r\n        yield return item;\r\n        foreach (T t in target) yield return t;\r\n    }\r\n}\r\n\r\n// or:\r\n\r\npublic static class Utility\r\n{\r\n    /// <summary>\r\n    /// Adds the specified element at the end of the IEnummerable.\r\n    /// </summary>\r\n    /// <typeparam name=\"T\">The type of elements the IEnumerable contans.</typeparam>\r\n    /// <param name=\"target\">The target.</param>\r\n    /// <param name=\"items\">The items to be concatenated.</param>\r\n    /// <returns>An IEnumerable, enumerating first the items in the existing enumerable</returns>\r\n    public static IEnumerable<T> ConcatItems<T>(this IEnumerable<T> target, params T[] items)\r\n    {\r\n        return target.Concat(items)\r\n    }\r\n\r\n    /// <summary>\r\n    /// Inserts the specified element at the start of the IEnumerable.\r\n    /// </summary>\r\n    /// <typeparam name=\"T\">The type of elements the IEnumerable contans.</typeparam>\r\n    /// <param name=\"target\">The IEnummerable.</param>\r\n    /// <param name=\"items\">The items to be concatenated.</param>\r\n    /// <returns>An IEnumerable, enumerating first the target elements, and then the new elements.</returns>\r\n    public static IEnumerable<T> ConcatTo<T>(this IEnumerable<T> target, params T[] items)\r\n    {\r\n        return items.Concat(target);\r\n    }\r\n}","var x = new[]{3,4,5}.ConcatTo(1,2); // yields 1,2,3,4,5\r\n\r\nvar x = new[]{3,4,5}.Concat(1); // yields 3,4,5,1"]}