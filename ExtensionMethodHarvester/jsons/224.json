{"Name":"Return<TIn, TOut>","Description":"A 'fluent' logic extension method that takes a value (can be anything) and a function that returns another value (can be anything) based on its logic. This is useful for both evaluating and optionally returning a value without declaring a temporary variable for the value.","Author":"James White","SubmittedOn":"1/5/2011 5:51:36 PM","Entries":["/// <summary>\r\n/// Returns a value based on an provided value and evaluation function\r\n/// </summary>\r\npublic static TOut Return<TIn, TOut>(\r\n    this TIn value, \r\n    Func<TIn, TOut> evaluateFunc)\r\n{\r\n    return evaluateFunc(value);\r\n}","return foo.Bar().Return( bar => bar.IsBaz \r\n   ? (Baz)bar : Baz.Empty );\r\n\r\n// Alternative to:\r\n\r\nvar bar = foo.Bar();\r\nreturn bar.IsBaz ? (Baz)bar : Baz.Empty;"]}