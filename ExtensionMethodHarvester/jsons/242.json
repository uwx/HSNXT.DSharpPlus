{"Name":"DeleteFiles","Description":"Deletes the files in a certain directory that comply to the searchpattern. The searchpattern can contain * and ? (the normal wildcard characters). The function can also search in the subdirectories.","Author":"Gaston Verelst","SubmittedOn":"10/30/2009 11:35:42 AM","Entries":["public static class DirectoryInfoExtensions\r\n    {\r\n        /// <summary>\r\n        /// Delete files in a folder that are like the searchPattern, don't include subfolders.\r\n        /// </summary>\r\n        /// <param name=\"di\"></param>\r\n        /// <param name=\"searchPattern\">DOS like pattern (example: *.xml, ??a.txt)</param>\r\n        /// <returns>Number of files that have been deleted.</returns>\r\n        public static int DeleteFiles(this DirectoryInfo di, string searchPattern)\r\n        {\r\n            return DeleteFiles(di, searchPattern, false);\r\n        }\r\n\r\n        /// <summary>\r\n        /// Delete files in a folder that are like the searchPattern\r\n        /// </summary>\r\n        /// <param name=\"di\"></param>\r\n        /// <param name=\"searchPattern\">DOS like pattern (example: *.xml, ??a.txt)</param>\r\n        /// <param name=\"includeSubdirs\"></param>\r\n        /// <returns>Number of files that have been deleted.</returns>\r\n        /// <remarks>\r\n        /// This function relies on DirectoryInfo.GetFiles() which will first get all the FileInfo objects in memory. This is good for folders with not too many files, otherwise\r\n        /// an implementation using Windows APIs can be more appropriate. I didn't need this functionality here but if you need it just let me know.\r\n        /// </remarks>\r\n        public static int DeleteFiles(this DirectoryInfo di, string searchPattern, bool includeSubdirs)\r\n        {\r\n            int deleted = 0;\r\n            foreach (FileInfo fi in di.GetFiles(searchPattern, includeSubdirs ? SearchOption.AllDirectories : SearchOption.TopDirectoryOnly))\r\n            {\r\n                fi.Delete();\r\n                deleted++;\r\n            }\r\n\r\n            return deleted;\r\n        }\r\n    }","DirectoryInfo di = new DirectoryInfo(@\"c:\\temp\");\r\ndi.DeleteFiles(\"*.xml\");  // Delete all *.xml files \r\ndi.DeleteFiles(\"*.xml\", true);  // Delete all, recursively"]}