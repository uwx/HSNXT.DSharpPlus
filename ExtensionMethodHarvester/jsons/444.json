{"Name":"RemoveAtFast","Description":"Fast version of the RemoveAt function. Overwrites the element at the specified index with the last element in the list, then removes the last element, thus lowering the inherent O(n) cost to O(1). IMPORTANT: Intended to be used on *unordered* lists only.","Author":"José María Calvo Iglesias","SubmittedOn":"6/5/2009 1:21:46 PM","Entries":["public static class ListExtender\r\n{\r\n    /// <summary>\r\n    /// Fast version of the RemoveAt function. Overwrites the element at the specified index\r\n    /// with the last element in the list, then removes the last element, thus lowering the \r\n    /// inherent O(n) cost to O(1). Intended to be used on *unordered* lists only.\r\n    /// </summary>\r\n    /// <param name=\"_list\">List.</param>\r\n    /// <param name=\"_index\">Index of the element to be removed.</param>\r\n    public static void RemoveAtFast<T>( this IList<T> _list, int _index )\r\n    {\r\n        _list[ _index ] = _list[ _list.Count - 1 ];\r\n        _list.RemoveAt( _list.Count - 1 );\r\n    }\r\n}","using ListExtender;\r\n\r\nvoid Test()\r\n{\r\n    List<int> intList = new List<int>( 10000 );\r\n\r\n    // Populate list\r\n    for( int n = 0; n < 10000; ++n )\r\n    {\r\n        intList.Add( n );\r\n    }\r\n\r\n    // Remove all elements. Note that not a single memory \r\n    // xfer will be performed since internally we're \r\n    // always removing the last element regardless the \r\n    // index we passed in.\r\n    for( int n = 0; n < 10000; ++n )\r\n    {\r\n        intList.RemoveAtFast( 0 );\r\n    }\r\n}"]}