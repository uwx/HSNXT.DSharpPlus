{"Name":"IEnumerable.None","Description":"The opposite of Any(). Returns true if the collection is empty, or if no item matches the predicate.","Author":"Entroper","SubmittedOn":"8/2/2016 12:32:50 PM","Entries":["public static bool None<T>(this IEnumerable<T> collection) => !collection.Any();\r\n\r\npublic static bool None<T>(this IEnumerable<T> collection, Func<T, bool> predicate) => !collection.Any(predicate);","var intList = new List<int> { 1, 2, 3 };\r\nvar emptyList = new List<int>();\r\n\r\nintList.None(); // false\r\nemptyList.None(); // true\r\n\r\nintList.None(i => i == 2); // false\r\nintList.None(i => i > 5); // true"]}