{"Name":"LeftOf","Description":"Returns the left of a string, terminated by a certain character. If the character isn't found the whole string is returned. Ex: string s = \"ab-23\"; s.LeftOf(s, '-') returns \"ab\"","Author":"Gaston Verelst","SubmittedOn":"10/2/2009 9:31:11 AM","Entries":["/// <summary>\r\n/// Returns the first part of the strings, up until the character c. If c is not found in the\r\n/// string the whole string is returned.\r\n/// </summary>\r\n/// <param name=\"s\">String to truncate</param>\r\n/// <param name=\"c\">Character to stop at.</param>\r\n/// <returns>Truncated string</returns>\r\npublic static string LeftOf(this string s, char c)\r\n{\r\n    int ndx = s.IndexOf(c);\r\n    if (ndx >= 0)\r\n    {\r\n\treturn s.Substring(0, ndx);\r\n    }\r\n\r\n    return s;\r\n}","/// <summary>\r\n///A test for LeftOf\r\n///</summary>\r\n[TestMethod()]\r\npublic void LeftOfTest()\r\n{\r\n\tstring s = \"7011(7011)\";\r\n\tchar c = '('; \r\n\tstring expected = \"7011\";\r\n\tstring actual;\r\n\tactual = StringExtensions.LeftOf(s, c);\r\n\tAssert.AreEqual(expected, actual);\r\n\tactual = StringExtensions.LeftOf(actual, c);\t// actual is now 7011\r\n\tAssert.AreEqual(expected, actual);\r\n}"]}