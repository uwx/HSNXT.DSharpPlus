{"Name":"CombineWith()","Description":"Combines two strings (potentially each of them can be null) with an optional given separator the way you expect. Default separator is a single space.","Author":"peSHIr","SubmittedOn":"5/6/2014 12:40:02 PM","Entries":["/// <summary>\r\n/// Combine two (optionally empty) strings the way you expect.\r\n/// </summary>\r\n/// <param name=\"input\">First string to combine</param>\r\n/// <param name=\"suffix\">Second string to append to <paramref name=\"input\"/></param>\r\n/// <param name=\"separator\">The separator to insert between <paramref name=\"input\"/> and <paramref name=\"suffix\"/> (default=a single space)</param>\r\n/// <returns>\r\n/// <c>\"{input}{separator}{suffix}\"</c> when both are not null/empty,\r\n/// <c>\"{input}\"</c> when <paramref name=\"suffix\"/> is null/empty,\r\n/// <c>\"{suffix}\"</c> when <paramref name=\"input\"/> is null/empty, or\r\n/// <c>string.Empty</c> when both are null/empty\r\n/// </returns>\r\npublic static string CombineWith(this string input, string suffix, string separator = \" \")\r\n{\r\n  if (string.IsNullOrEmpty(input))\r\n  {\r\n    if (string.IsNullOrEmpty(suffix))\r\n    {\r\n      return string.Empty;\r\n    }\r\n    else\r\n    {\r\n      return suffix;\r\n    }\r\n  }\r\n  else\r\n  {\r\n    if (string.IsNullOrEmpty(suffix))\r\n    {\r\n      return input;\r\n    }\r\n    else\r\n    {\r\n      return string.Format(\"{0}{1}{2}\", input, separator, suffix);\r\n    }\r\n  }\r\n}","string firstName = \"John\";\r\nstring lastName = \"Doe\";\r\nstring fullName = firstName.CombineWith(lastName);"]}