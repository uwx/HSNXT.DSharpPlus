{"Name":"EnqueueWithCapacity","Description":"Sometimes you may need a Queue<T> that, once it hits a capacity, dequeues items automatically to maintain a certain maximum. While it may be best to derive a new type from Queue<T>, this will get it done much more quickly. This is very useful for maintaining a rolling average or a \"history\" feature.","Author":"David Harris","SubmittedOn":"8/21/2010 1:02:41 AM","Entries":["public static void EnqueueWithCapacity<T>(this Queue<T> q, T item, int MaxSize)\r\n{\r\n\tif(q.Count >= MaxSize) q.Dequeue();\r\n\tq.Enqueue(item);\r\n}","Queue<int> q = new Queue<int>();\r\nq.EnqueueWithCapacity(0, 3); // {0}\r\nq.EnqueueWithCapacity(1, 3); // {0, 1}\r\nq.EnqueueWithCapacity(2, 3); // {0, 1, 2}\r\nq.EnqueueWithCapacity(3, 3); // {1, 2, 3}"]}