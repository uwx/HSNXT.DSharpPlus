{"Name":"Parse<T>","Description":"Parse a string to any other type including nullable types.","Author":"Jigar Desai","SubmittedOn":"3/27/2008 3:37:08 PM","Entries":["using System;\r\nusing System.ComponentModel;\r\n\r\npublic static class Parser {\r\n    \r\n    public static T Parse<T>(this string value) {        \r\n        // Get default value for type so if string\r\n        // is empty then we can return default value.\r\n        T result = default(T); \r\n        if (!string.IsNullOrEmpty(value)) {            \r\n            // we are not going to handle exception here\r\n            // if you need SafeParse then you should create\r\n            // another method specially for that.\r\n            TypeConverter tc = TypeDescriptor.GetConverter(typeof(T)); \r\n            result = (T)tc.ConvertFrom(value);\r\n        } return result;\r\n    }\r\n}","// regular parsing\r\nint i = \"123\".Parse<int>(); \r\nint? inull = \"123\".Parse<int?>(); \r\nDateTime d = \"01/12/2008\".Parse<DateTime>(); \r\nDateTime? dn = \"01/12/2008\".Parse<DateTime?>();\r\n\r\n\r\n// null values\r\nstring sample = null; \r\nint? k = sample.Parse<int?>(); // returns null\r\nint l = sample.Parse<int>();   // returns 0\r\nDateTime dd = sample.Parse<DateTime>(); // returns 01/01/0001\r\nDateTime? ddn = sample.Parse<DateTime?>(); // returns null"]}