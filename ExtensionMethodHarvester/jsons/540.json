{"Name":"ToDistinctDictionary","Description":"Creates an IDictionary&lt;TKey, TValue&gt; from the IEnumerable&lt;TSource&gt; instance based on the key selector and element selector. This is distinct by using the built-in index of the dictionary instance for either adding or updating a keys corresponding value.","Author":"David Michael Pine","SubmittedOn":"11/10/2014 3:42:30 PM","Entries":["public static class EnumerableExtensions\r\n    {\r\n        /// <summary>\r\n        /// Creates a <see cref=\"T:System.Collections.Generic.Dictionary`2\"/> from an \r\n        /// <see cref=\"T:System.Collections.Generic.IEnumerable`1\"/> according to a specified \r\n        /// key selector function, and an element selector function.\r\n        /// </summary>\r\n        public static IDictionary<TKey, TElement> ToDistinctDictionary<TSource, TKey, TElement>(\r\n            this IEnumerable<TSource> source,\r\n            Func<TSource, TKey> keySelector,\r\n            Func<TSource, TElement> elementSelector)\r\n        {\r\n            if (source == null) throw new NullReferenceException(\"The 'source' cannot be null.\");\r\n            if (keySelector == null) throw new ArgumentNullException(\"keySelector\");\r\n            if (elementSelector == null) throw new ArgumentNullException(\"elementSelector\");\r\n\r\n            var dictionary = new Dictionary<TKey, TElement>();\r\n            foreach (TSource current in source)\r\n            {\r\n                dictionary[keySelector(current)] = elementSelector(current);\r\n            }\r\n            return dictionary;\r\n        }\r\n    }","var dictionary = someList.ToDistinctDictionary(li => li.Key, li => li);"]}