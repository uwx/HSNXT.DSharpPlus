{"Name":"WriteToConsole","Description":"Write all elements in the Enumeration to the Console","Author":"Fons Sonnemans","SubmittedOn":"12/10/2007 8:47:09 PM","Entries":["using System;\r\nusing System.Collections.Generic;\r\n\r\nnamespace ExtensionMethods {\r\n    public static class Extensions {\r\n\r\n        /// <summary>\r\n        /// Write all elements in the Enumeration to the Console\r\n        /// </summary>\r\n        /// <typeparam name=\"T\"></typeparam>\r\n        /// <param name=\"list\"></param>\r\n        public static void WriteToConsole<T>(this IEnumerable<T> list) {\r\n            foreach (var obj in list) {\r\n                Console.WriteLine(obj);\r\n            }\r\n        }\r\n\r\n        /// <summary>\r\n        /// Write all elements in the Enumeration to the Console\r\n        /// </summary>\r\n        /// <typeparam name=\"T\"></typeparam>\r\n        /// <param name=\"list\">the enumeration written to the list</param>\r\n        /// <param name=\"predicate\">a transform function to apply to each element</param>\r\n        public static void WriteToConsole<T>(this IEnumerable<T> list, Func<T, object> transfer) {\r\n            foreach (var obj in list) {\r\n                Console.WriteLine(transfer(obj));\r\n            }\r\n        }\r\n\r\n    }\r\n}","// Uses class Employee with Name and Salary\r\nvar l = new List<Employee>()\r\n{\r\n    new Employee(\"Fons\", 2000),\r\n    new Employee(\"Jim\", 3000),\r\n    new Employee(\"Ellen\", 4000)\r\n};\r\n\r\nl.WriteToConsole();\r\n\r\nl.WriteToConsole(emp => emp.Name);"]}