{"Name":"Inject object properties into string","Description":"Supplements String.Format by letting you get properties from objects","Author":"Lasse Sj√∏rup","SubmittedOn":"8/19/2013 9:47:44 PM","Entries":["namespace String.InjecterExtension\r\n{\r\n    using System;\r\n    using System.Collections.Generic;\r\n    using System.Globalization;\r\n    using System.Reflection;\r\n\r\n    public static class StringExtensions\r\n    {\r\n        public static string Inject(this string source, IFormatProvider formatProvider, params object[] args)\r\n        {\r\n            var objectWrappers = new object[args.Length];\r\n            for (var i = 0; i < args.Length; i++)\r\n            {\r\n                 objectWrappers[i] = new ObjectWrapper(args[i]);\r\n            }\r\n\r\n            return string.Format(formatProvider, source, objectWrappers);\r\n        }\r\n        \r\n        public static string Inject(this string source, params object[] args)\r\n        {\r\n            return Inject(source, CultureInfo.CurrentUICulture, args);\r\n        }\r\n\r\n        private class ObjectWrapper : IFormattable\r\n        {\r\n            private readonly object wrapped;\r\n            private static readonly Dictionary<string, FormatInfo> Cache = new Dictionary<string, FormatInfo>();\r\n\r\n            public ObjectWrapper(object wrapped)\r\n            {\r\n                this.wrapped = wrapped;\r\n            }\r\n\r\n            public string ToString(string format, IFormatProvider formatProvider)\r\n            {\r\n                if (string.IsNullOrEmpty(format))\r\n                {\r\n                    return this.wrapped.ToString();\r\n                }\r\n\r\n                var type = this.wrapped.GetType();\r\n                var key = type.FullName + \":\" + format;\r\n\r\n                FormatInfo wrapperCache;\r\n                lock (Cache)\r\n                {\r\n                    if (!Cache.TryGetValue(key, out wrapperCache))\r\n                    {\r\n                        wrapperCache = CreateFormatInfo(format, type);\r\n                        Cache.Add(key, wrapperCache);\r\n                    }\r\n                }\r\n\r\n                var propertyInfo = wrapperCache.PropertyInfo;\r\n                var outputFormat = wrapperCache.OutputFormat;\r\n\r\n                var value = propertyInfo != null ? propertyInfo.GetValue(this.wrapped) : this.wrapped;\r\n\r\n                return string.Format(formatProvider, outputFormat, value);\r\n            }\r\n\r\n            private static FormatInfo CreateFormatInfo(string format, IReflect type)\r\n            {\r\n                var spilt = format.Split(new[] { ':' }, 2);\r\n                var param = spilt[0];\r\n                var hasSubFormat = spilt.Length == 2;\r\n                var subFormat = hasSubFormat ? spilt[1] : string.Empty;\r\n\r\n                var propertyInfo = type.GetProperty(param, BindingFlags.Instance | BindingFlags.Public | BindingFlags.IgnoreCase);\r\n                var outputFormat = propertyInfo != null ? (hasSubFormat ? \"{0:\" + subFormat + \"}\" : \"{0}\") : \"{0:\" + format + \"}\";\r\n\r\n                return new FormatInfo(propertyInfo, outputFormat);\r\n            }\r\n\r\n            private class FormatInfo\r\n            {\r\n                public FormatInfo(PropertyInfo propertyInfo, string form)\r\n                {\r\n                    this.PropertyInfo = propertyInfo;\r\n                    this.OutputFormat = form;\r\n                }\r\n\r\n                public PropertyInfo PropertyInfo { get; private set; }\r\n\r\n                public string OutputFormat { get; private set; }\r\n            }\r\n        }\r\n    }\r\n}","var sourceObject = new { simpleString = \"string\", integer = 3, Date = new DateTime(2013, 08, 19) };\r\n\r\nDebug.WriteLine(\"Gettings property by name : '{0:simpleString}' event cast insensitive : {0:date}\".Inject(sourceObject));\r\n\r\nDebug.WriteLine(\"The property can be formatted by appending standard String.Format syntax after the property name like this {0:date:yyyy-MM-dd}\".Inject(sourceObject));\r\n\r\nDebug.WriteLine(\"Use culture info to format the value to a specific culture '{0:date:dddd}'\".Inject(CultureInfo.GetCultureInfo(\"da-DK\"), sourceObject));\r\n\r\nDebug.WriteLine(\"Inject more values and event build in types {0:integer} {1} with build in properties {1:length}\".Inject(sourceObject, \"simple string\"));"]}