{"Name":"WithVar","Description":"Improve readability of string.Format","Author":"Stephan Jun","SubmittedOn":"4/1/2015 7:40:39 AM","Entries":["/// <summary>\r\n/// ex) \"{a}, {a:000}, {b}\".WithVar(new {a, b});\r\n/// </summary>\r\n/// <typeparam name=\"T\"></typeparam>\r\n/// <param name=\"str\">A composite format string (equal string.Format's format)</param>\r\n/// <param name=\"arg\">class or anonymouse type</param>\r\n/// <returns></returns>\r\npublic static string WithVar<T>(this string str, T arg) where T : class\r\n{\r\n\tvar type = typeof(T);\r\n\tforeach (var member in type.GetMembers(BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance))\r\n\t{\r\n\t\tif (!(member is FieldInfo || member is PropertyInfo))\r\n\t\t\tcontinue;\r\n\t\tvar pattern = @\"\\{\" + member.Name + @\"(\\:.*?)?\\}\";\r\n\t\tvar alreadyMatch = new HashSet<string>();\r\n\t\tforeach (Match m in Regex.Matches(str, pattern))\r\n\t\t{\r\n\t\t\tif (alreadyMatch.Contains(m.Value)) continue; else alreadyMatch.Add(m.Value);\r\n\t\t\tstring oldValue = m.Value;\r\n\t\t\tstring newValue = null;\r\n\t\t\tstring format = \"{0\" + m.Groups[1].Value + \"}\";\r\n\t\t\tif (member is FieldInfo)\r\n\t\t\t\tnewValue = format.With(((FieldInfo)member).GetValue(arg));\r\n\t\t\tif (member is PropertyInfo)\r\n\t\t\t\tnewValue = format.With(((PropertyInfo)member).GetValue(arg));\r\n\t\t\tif (newValue != null)\r\n\t\t\t\tstr = str.Replace(oldValue, newValue);\r\n\t\t}\r\n\t}\r\n\treturn str;\r\n}\r\n\r\npublic static string With(this string str, params object[] param)\r\n{\r\n\treturn string.Format(str, param);\r\n}","int count = 10;\r\nvar message = \"{count} Rows Deleted!\".WithVar(new {count});\r\n// message : 10 Rows Deleted!\r\n\r\nvar message2 = \"{count:00000} Rows Deleted!\".WithVar(new {count});\r\n// message2 : 00010 Rows Deleted!\r\n\r\nvar query = \"select * from {TableName} where id >= {Id};\".WithVar(new {TableName = \"Foo\", Id = 10});\r\n// query : select * from Foo where id >= 10;"]}