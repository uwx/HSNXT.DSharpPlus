{"Name":"ReaderWriterLockSlim","Description":"Simplified and elegant usage of ReaderWriterLockSlim that","Author":"Sharp IT, Maciej Rychter","SubmittedOn":"1/1/2016 1:57:33 PM","Entries":["public static class ThreadingExtensions\r\n    {\r\n        public static void Write(this ReaderWriterLockSlim rwlock, Action action)\r\n        {\r\n            if (action == null)\r\n            {\r\n                throw new ArgumentNullException(\"action\");\r\n            }\r\n\r\n            rwlock.EnterWriteLock();\r\n\r\n            try\r\n            {\r\n                action();\r\n            }\r\n            finally\r\n            {\r\n                rwlock.ExitWriteLock();\r\n            }\r\n        }\r\n\r\n        public static void Read(this ReaderWriterLockSlim rwlock, Action action)\r\n        {\r\n            if (action == null)\r\n            {\r\n                throw new ArgumentNullException(\"action\");\r\n            }\r\n\r\n            rwlock.EnterReadLock();\r\n\r\n            try\r\n            {\r\n                action();\r\n            }\r\n            finally\r\n            {\r\n                rwlock.ExitReadLock();\r\n            }\r\n        }\r\n\r\n        public static void ReadUpgradable(this ReaderWriterLockSlim rwlock, Action action)\r\n        {\r\n            if (action == null)\r\n            {\r\n                throw new ArgumentNullException(\"action\");\r\n            }\r\n\r\n            rwlock.EnterUpgradeableReadLock();\r\n\r\n            try\r\n            {\r\n                action();\r\n            }\r\n            finally\r\n            {\r\n                rwlock.ExitUpgradeableReadLock();\r\n            }\r\n        }\r\n    }","[Test]\r\n        public void ThreadExtensions()\r\n        {\r\n            var cacheLock = new ReaderWriterLockSlim();\r\n            var innerCache = new Dictionary<int, string>();\r\n\r\n            var value = \"value1\";\r\n            var readvalue = string.Empty;\r\n\r\n            cacheLock.Write(() => innerCache[1] = value);\r\n            cacheLock.Read(() => readvalue = innerCache[1]);\r\n\r\n            Assert.AreEqual(value, readvalue);\r\n\r\n        }"]}