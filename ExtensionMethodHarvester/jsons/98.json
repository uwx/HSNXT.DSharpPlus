{"Name":"IsSubclassOfRawGeneric","Description":"Is essentially a modified version of Type.IsSubClassOf that supports checking whether a class derives from a generic base-class without specifying the type parameters. For instance, it supports typeof(List<>) to see if a class derives from the List<T> class. The actual code was borrowed from http://stackoverflow.com/questions/457676/c-reflection-check-if-a-class-is-derived-from-a-generic-class.","Author":"Dennis Doomen","SubmittedOn":"2/17/2009 10:05:31 AM","Entries":["/// <summary>\r\n        /// Alternative version of <see cref=\"Type.IsSubclassOf\"/> that supports raw generic types (generic types without\r\n        /// any type parameters).\r\n        /// </summary>\r\n        /// <param name=\"baseType\">The base type class for which the check is made.</param>\r\n        /// <param name=\"toCheck\">To type to determine for whether it derives from <paramref name=\"baseType\"/>.</param>\r\n        public static bool IsSubclassOfRawGeneric(this Type toCheck, Type baseType)\r\n        {\r\n            while (toCheck != typeof(object))\r\n            {\r\n                Type cur = toCheck.IsGenericType ? toCheck.GetGenericTypeDefinition() : toCheck;\r\n                if (baseType == cur)\r\n                {\r\n                    return true;\r\n                }\r\n\r\n                toCheck = toCheck.BaseType;\r\n            }\r\n\r\n            return false;\r\n        }","bool isDerived = someType.IsSubclassOfRawGeneric(typeof(List<>));"]}