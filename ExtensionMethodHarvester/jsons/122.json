{"Name":"IsNull","Description":"Unified advanced generic check for: DbNull.Value, INullable.IsNull, !Nullable<>.HasValue, null reference. Omits boxing for value types.","Author":"Den","SubmittedOn":"9/4/2011 10:52:57 AM","Entries":["[DebuggerStepThrough]\r\npublic static bool IsNull<T>\r\n    (this T me)\r\n{\r\n    if (me is INullable && (me as INullable).IsNull) return true;\r\n    var type = typeof (T);\r\n    if (type.IsValueType)\r\n    {\r\n        if (!ReferenceEquals(Nullable.GetUnderlyingType(type), null) && me.GetHashCode() == 0) return true;\r\n    }\r\n    else\r\n    {\r\n        if (ReferenceEquals(me, null)) return true;\r\n        if (Convert.IsDBNull(me)) return true;\r\n    }\r\n    return false;\r\n}\r\n[DebuggerStepThrough]\r\npublic static bool IsNull<T>\r\n    (this T? me)\r\n    where T : struct\r\n{\r\n    return !me.HasValue;\r\n}","object a = null;\r\nint? b = null;\r\nvar c = DBNull.Value;\r\nvar d = SqlInt32.Null;\r\nConsole.WriteLine(a.IsNull());\r\nConsole.WriteLine(b.IsNull());\r\nConsole.WriteLine(c.IsNull());\r\nConsole.WriteLine(d.IsNull());"]}