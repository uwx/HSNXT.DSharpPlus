{"Name":"ToEnum","Description":"ToEnum - with nullable type","Author":"chris_mckelt","SubmittedOn":"1/23/2015 7:47:54 AM","Entries":["public static T? ToEnum<T>(this string value)where T : struct\r\n        {\r\n            if (string.IsNullOrEmpty(value)) return default(T);\r\n            T result;\r\n            return Enum.TryParse<T>(value, true, out result) ? result : default(T);\r\n        }","public class EnumExtensionsTestFixture\r\n    {\r\n        private enum TestEnum\r\n        {\r\n            Abc,\r\n            Xyz\r\n        }\r\n\r\n        [Fact]\r\n        public void ToEnumShouldParseEqualString()\r\n        {\r\n            const string test = \"Abc\";\r\n            TestEnum? result = test.ToEnum<TestEnum>();\r\n            Assert.Equal(TestEnum.Abc, result);\r\n        }\r\n\r\n        [Fact]\r\n        public void ToEnumShouldParseWrongCaseString()\r\n        {\r\n            const string test = \"xyz\";\r\n            TestEnum? result = test.ToEnum<TestEnum>();\r\n            Assert.Equal(TestEnum.Xyz, result);\r\n        }\r\n\r\n        [Fact]\r\n        public void ToEnumShouldBeNullForInvalidString()\r\n        {\r\n            const string test = \"lmn\";\r\n            TestEnum? result = test.ToEnum<TestEnum>();\r\n            Assert.False(result.HasValue);\r\n        }\r\n    }"]}