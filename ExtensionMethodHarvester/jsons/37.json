{"Name":"ToList<T>(Func<object, T> func)","Description":"Converts an array of any type to List<T> passing a mapping delegate Func<object, T> that returns type T. If T is null, it will not be added to the collection. If the array is null, then a new instance of List<T>() is returned.","Author":"James Levingston","SubmittedOn":"10/19/2010 1:05:15 AM","Entries":["public static List<T> ToList<T>(this Array items, Func<object, T> mapFunction)\r\n        {\r\n            if (items == null || mapFunction == null)\r\n                return new List<T>();            \r\n\r\n            List<T> coll = new List<T>();\r\n            for (int i = 0; i < items.Length; i++)\r\n            {\r\n                T val = mapFunction(items.GetValue(i));\r\n                if(val != null)\r\n                    coll.Add(val);\r\n            }\r\n            return coll;\r\n        }","--> Make another extension method\r\n\r\npublic static List<T> ToList<T>(this object[] items)\r\n        {\r\n            return items.ToList<T>(o => { return (T)o; });\r\n        }\r\n\r\nReduces this : http://extensionmethod.net/Details.aspx?ID=351\r\n\r\nTo this:\r\n\r\npublic static List<T> EnumToList<T>() where T : struct\r\n        {\r\n            return Enum.GetValues(typeof(T)).ToList<T>(enumVal => { return (T)Enum.Parse(typeof(T), enumVal.ToString()); });\r\n        }\r\n\r\n--> Use in Linq\r\n\r\nvar myItems = from i in array.ToList<MyType>( o => { return (MyType)o; }) select i;"]}