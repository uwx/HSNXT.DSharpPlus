{"Name":"ToDelimitedString<T>(char delimiter, Func<T, PropertyInfo, string> func)","Description":"Map any object T to a delimited string and control how that string is formatted.","Author":"James Levingston","SubmittedOn":"10/19/2010 3:38:43 AM","Entries":["public static string ToDelimitedString<T>(this T obj, char delimiter, Func<T, System.Reflection.PropertyInfo, string> func)\r\n        {\r\n            if (obj == null || func == null)\r\n                return null;\r\n\r\n            var builder = new StringBuilder();\r\n            var props = obj.GetType().GetProperties();\r\n            for (int p = 0; p < props.Length; p++ )\r\n                builder.Append(func(obj, props[p]) + delimiter.ToString());\r\n\r\n            //Remove the last character, the last delimiter\r\n            if (builder.Length > 0)\r\n                return builder.ToString().Remove(builder.ToString().Length - 1);\r\n\r\n            return null;\r\n        }","--> Expand with more extensions\r\n\r\n  public static string ToCommaDelimitedString(this object obj)\r\n        {\r\n            return obj.ToDelimitedString<object>(',',\r\n                (object o, System.Reflection.PropertyInfo p) => { return (string.Format(\"{0}.{1}={2}\", p.ReflectedType.Name, p.Name, Convert.ToString(p.GetValue(o, null)))); });\r\n        }\r\n\r\n        public static string ToPipeDelimitedString(this object obj)\r\n        {\r\n            return obj.ToDelimitedString<object>('|',\r\n                (object o, System.Reflection.PropertyInfo p) => { return (string.Format(\"{0}.{1}={2}\", p.ReflectedType.Name, p.Name, Convert.ToString(p.GetValue(o, null)))); });\r\n        }\r\n\r\n--> Above examples in use is below.\r\n\r\nvar commaLine = obj.ToCommaDelimitedString();\r\nvar pipeLine = obj.ToPipeDelimitedString();"]}