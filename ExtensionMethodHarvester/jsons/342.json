{"Name":"Pipe","Description":"It is like pipe operator in F# and is useful for chaining function calls especially in expressions. (More in http://foop.codeplex.com/)","Author":"Kaveh Shahbazian","SubmittedOn":"1/4/2010 12:23:49 AM","Entries":["public static R Pipe<T, R>(this T o, Func<T, R> func)\r\n        {\r\n            if (func == null) throw new ArgumentNullException(\"func\", \"'func' can not be null.\");\r\n            T buffer = o;\r\n            return func(buffer);\r\n        }\r\n        public static T Pipe<T>(this T o, Action<T> action)\r\n        {\r\n            if (action == null) throw new ArgumentNullException(\"action\", \"'action' can not be null.\");\r\n            T buffer = o;\r\n            action(buffer);\r\n            return buffer;\r\n        }","<%= variable.Pipe(x => this.Fun1(x)).Pipe(x =>\r\n{\r\n    ...;\r\n    return this.F2(x);\r\n}) %>"]}