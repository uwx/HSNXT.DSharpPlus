{"Name":"Strongly Typed Databinding","Description":"This is an extension that I use for doing strongly typed databinding to controls in a winforms project. I dislike using strings to databind because they do not generate compiler errors when the bound object changes. This extension allows you to, instead of using a string, use an expression to bind to for both the control property and the object property.","Author":"http://stackoverflow.com/questions/3444294/strong-typed-windows-forms-databinding","SubmittedOn":"3/26/2012 10:46:13 PM","Entries":["///<seealso cref=\"http://stackoverflow.com/questions/3444294/strong-typed-windows-forms-databinding\"/>\r\n\tpublic static class ControlExtensions {\r\n\r\n\t\t/// <summary>Databinding with strongly typed object names</summary>\r\n\t\t/// <param name=\"control\">The Control you are binding to</param>\r\n\t\t/// <param name=\"controlProperty\">The property on the control you are binding to</param>\r\n\t\t/// <param name=\"dataSource\">The object you are binding to</param>\r\n\t\t/// <param name=\"dataSourceProperty\">The property on the object you are binding to</param>\r\n\t\tpublic static Binding Bind<TControl, TDataSourceItem>(this TControl control, Expression<Func<TControl, object>> controlProperty, object dataSource, Expression<Func<TDataSourceItem, object>> dataSourceProperty)\r\n\t\twhere TControl :Control {\r\n\t\t\treturn control.DataBindings.Add(PropertyName.For(controlProperty), dataSource, PropertyName.For(dataSourceProperty));\r\n\t\t}\r\n\t\tpublic static Binding Bind<TControl, TDataSourceItem>(this TControl control, Expression<Func<TControl, object>> controlProperty, object dataSource, Expression<Func<TDataSourceItem, object>> dataSourceProperty, bool formattingEnabled = false)\r\n\t\twhere TControl :Control {\r\n\t\t\treturn control.DataBindings.Add(PropertyName.For(controlProperty), dataSource, PropertyName.For(dataSourceProperty), formattingEnabled);\r\n\t\t}\r\n\t\tpublic static Binding Bind<TControl, TDataSourceItem>(this TControl control, Expression<Func<TControl, object>> controlProperty, object dataSource, Expression<Func<TDataSourceItem, object>> dataSourceProperty, bool formattingEnabled, DataSourceUpdateMode updateMode)\r\n\t\twhere TControl :Control {\r\n\t\t\treturn control.DataBindings.Add(PropertyName.For(controlProperty), dataSource, PropertyName.For(dataSourceProperty), formattingEnabled, updateMode);\r\n\t\t}\r\n\t\tpublic static Binding Bind<TControl, TDataSourceItem>(this TControl control, Expression<Func<TControl, object>> controlProperty, object dataSource, Expression<Func<TDataSourceItem, object>> dataSourceProperty, bool formattingEnabled, DataSourceUpdateMode updateMode, object nullValue)\r\n\t\twhere TControl :Control {\r\n\t\t\treturn control.DataBindings.Add(PropertyName.For(controlProperty), dataSource, PropertyName.For(dataSourceProperty), formattingEnabled, updateMode, nullValue);\r\n\t\t}\r\n\t\tpublic static Binding Bind<TControl, TDataSourceItem>(this TControl control, Expression<Func<TControl, object>> controlProperty, object dataSource, Expression<Func<TDataSourceItem, object>> dataSourceProperty, bool formattingEnabled, DataSourceUpdateMode updateMode, object nullValue, string formatString)\r\n\t\twhere TControl :Control {\r\n\t\t\treturn control.DataBindings.Add(PropertyName.For(controlProperty), dataSource, PropertyName.For(dataSourceProperty), formattingEnabled, updateMode, nullValue, formatString);\r\n\t\t}\r\n\t\tpublic static Binding Bind<TControl, TDataSourceItem>(this TControl control, Expression<Func<TControl, object>> controlProperty, object dataSource, Expression<Func<TDataSourceItem, object>> dataSourceProperty, bool formattingEnabled, DataSourceUpdateMode updateMode, object nullValue, string formatString, IFormatProvider formatInfo)\r\n\t\twhere TControl :Control {\r\n\t\t\treturn control.DataBindings.Add(PropertyName.For(controlProperty), dataSource, PropertyName.For(dataSourceProperty), formattingEnabled, updateMode, nullValue, formatString, formatInfo);\r\n\t\t}\r\n\r\n\t\tpublic static class PropertyName {\r\n\t\t\tpublic static string For<T>(Expression<Func<T, object>> property) {\r\n\t\t\t\tvar member = property.Body as MemberExpression;\r\n\t\t\t\tif(null == member) {\r\n\t\t\t\t\tvar unary = property.Body as UnaryExpression;\r\n\t\t\t\t\tif(null != unary) member = unary.Operand as MemberExpression;\r\n\t\t\t\t}\r\n\t\t\t\treturn null != member ? member.Member.Name : string.Empty;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t}","//txtCLSId is a TextBox\r\n//_TaskListItem is an object of type ProjectServicesTaskList\r\n//ProjectServicesTaskList contains a property (int) CLSHeaderID\r\n\r\ntxtCLSId.Bind(c => c.Text, _TaskListItem, ProjectServicesTaskList p) => p.CLSHeaderId);"]}