{"Name":"Pivot","Description":"Groups the elements of a sequence according to a specified firstKey selector function and rotates the unique values from the secondKey selector function into multiple values in the output, and performs aggregations.","Author":"Fons Sonnemans","SubmittedOn":"1/21/2009 9:15:07 PM","Entries":["using System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ReflectionIT.Training {\r\n\r\n    public static class LinqExtenions {\r\n\r\n        public static Dictionary<TFirstKey, Dictionary<TSecondKey, TValue>> Pivot<TSource, TFirstKey, TSecondKey, TValue>(this IEnumerable<TSource> source, Func<TSource, TFirstKey> firstKeySelector, Func<TSource, TSecondKey> secondKeySelector, Func<IEnumerable<TSource>, TValue> aggregate) {\r\n            var retVal = new Dictionary<TFirstKey, Dictionary<TSecondKey, TValue>>();\r\n\r\n            var l = source.ToLookup(firstKeySelector);\r\n            foreach (var item in l) {\r\n                var dict = new Dictionary<TSecondKey, TValue>();\r\n                retVal.Add(item.Key, dict);\r\n                var subdict = item.ToLookup(secondKeySelector);\r\n                foreach (var subitem in subdict) {\r\n                    dict.Add(subitem.Key, aggregate(subitem));\r\n                }\r\n            }\r\n\r\n            return retVal;\r\n        }\r\n\r\n    }\r\n}","class Program {\r\n\r\n    internal class Employee {\r\n        public string Name { get; set; }\r\n        public string Department { get; set; }\r\n        public string Function { get; set; }\r\n        public decimal Salary { get; set; }\r\n    }\r\n\r\n    static void Main(string[] args) {\r\n\r\n        var l = new List<Employee>() {\r\n            new Employee() { Name = \"Fons\", Department = \"R&D\", Function = \"Trainer\", Salary = 2000 },\r\n            new Employee() { Name = \"Jim\", Department = \"R&D\", Function = \"Trainer\", Salary = 3000 },\r\n            new Employee() { Name = \"Ellen\", Department = \"Dev\", Function = \"Developer\", Salary = 4000 },\r\n            new Employee() { Name = \"Mike\", Department = \"Dev\", Function = \"Consultant\", Salary = 5000 },\r\n            new Employee() { Name = \"Jack\", Department = \"R&D\", Function = \"Developer\", Salary = 6000 },\r\n            new Employee() { Name = \"Demy\", Department = \"Dev\", Function = \"Consultant\", Salary = 2000 }};\r\n\r\n        var result1 = l.Pivot(emp => emp.Department, emp2 => emp2.Function, lst => lst.Sum(emp => emp.Salary));\r\n\r\n        foreach (var row in result1) {\r\n            Console.WriteLine(row.Key);\r\n            foreach (var column in row.Value) {\r\n                Console.WriteLine(\"  \" + column.Key + \"\\t\" + column.Value);\r\n\r\n            }\r\n        }\r\n\r\n        Console.WriteLine(\"----\");\r\n\r\n        var result2 = l.Pivot(emp => emp.Function, emp2 => emp2.Department, lst => lst.Count());\r\n\r\n        foreach (var row in result2) {\r\n            Console.WriteLine(row.Key);\r\n            foreach (var column in row.Value) {\r\n                Console.WriteLine(\"  \" + column.Key + \"\\t\" + column.Value);\r\n\r\n            }\r\n        }\r\n\r\n        Console.WriteLine(\"----\");\r\n    }\r\n}"]}