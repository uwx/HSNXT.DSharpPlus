{"Name":"IndexOf<T>()","Description":"Returns the index of the first occurrence in a sequence by using the default equality comparer or a specified one.","Author":"Fons Sonnemans","SubmittedOn":"3/4/2009 7:56:38 PM","Entries":["using System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ReflectionIT.Collections.Generic {\r\n\r\n    public static class Extensions {\r\n\r\n        /// <summary>\r\n        /// Returns the index of the first occurrence in a sequence by using the default equality comparer.\r\n        /// </summary>\r\n        /// <typeparam name=\"TSource\">The type of the elements of source.</typeparam>\r\n        /// <param name=\"list\">A sequence in which to locate a value.</param>\r\n        /// <param name=\"value\">The object to locate in the sequence</param>\r\n        /// <returns>The zero-based index of the first occurrence of value within the entire sequence, if found; otherwise, –1.</returns>\r\n        public static int IndexOf<TSource>(this IEnumerable<TSource> list, TSource value) where TSource : IEquatable<TSource> {\r\n\r\n            return list.IndexOf<TSource>(value, EqualityComparer<TSource>.Default);\r\n\r\n        }\r\n\r\n        /// <summary>\r\n        /// Returns the index of the first occurrence in a sequence by using a specified IEqualityComparer.\r\n        /// </summary>\r\n        /// <typeparam name=\"TSource\">The type of the elements of source.</typeparam>\r\n        /// <param name=\"list\">A sequence in which to locate a value.</param>\r\n        /// <param name=\"value\">The object to locate in the sequence</param>\r\n        /// <param name=\"comparer\">An equality comparer to compare values.</param>\r\n        /// <returns>The zero-based index of the first occurrence of value within the entire sequence, if found; otherwise, –1.</returns>\r\n        public static int IndexOf<TSource>(this IEnumerable<TSource> list, TSource value, IEqualityComparer<TSource> comparer) {\r\n            int index = 0;\r\n            foreach (var item in list) {\r\n                if (comparer.Equals(item, value)) {\r\n                    return index;\r\n                }\r\n                index++;\r\n            }\r\n            return -1;\r\n        }\r\n        \r\n    }\r\n}","using System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing ReflectionIT.Collections.Generic;\r\n\r\nnamespace ConsoleApplication3 {\r\n    class Program {\r\n\r\n        static void Main(string[] args) {\r\n                \r\n            int[] numbers = new int[] { 5, 3, 12, 56, 43 };\r\n\r\n            int index = numbers.IndexOf(123);\r\n\r\n            Console.WriteLine(index);\r\n        }\r\n    }\r\n}"]}