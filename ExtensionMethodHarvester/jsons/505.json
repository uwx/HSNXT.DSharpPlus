{"Name":"TimesOrUntil","Description":"Attempts to retrieve a valid a result from your function one or more times with an optional 'in between' step (i.e. delay). Replaces a common code pattern with a more readable, shared pattern.","Author":"James White","SubmittedOn":"10/29/2010 4:32:37 PM","Entries":["public static T TimesOrUntil<T>(this int times, Func<T> retrieve, Func<T, bool> validate, Action inbetween = null)\r\n{\r\n    T state;\r\n    var count = 0;\r\n\r\n    while (true)\r\n    {\r\n        state = retrieve();\r\n\r\n        if (validate(state) || ++count >= times)\r\n            break;\r\n\r\n        if (inbetween != null) inbetween();\r\n    }\r\n\r\n    return state;\r\n}","var folderStatus = 5.TimesOrUntil(\r\n                         imap.SelectInbox,\r\n                         state => state.Recent > 0,\r\n                         () => Thread.Sleep(500));"]}