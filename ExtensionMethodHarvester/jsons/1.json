{"Name":"OrderBy(string sortExpression)","Description":"Orders a list based on a sortexpression. Useful in object databinding scenarios where the objectdatasource generates a dynamic sortexpression (example: \"Name desc\") that specifies the property of the object sort on.","Author":"C.F.Meijers","SubmittedOn":"4/25/2008 11:45:04 AM","Entries":["public static IEnumerable<T> OrderBy<T>(this IEnumerable<T> list, string sortExpression)\r\n        {\r\n            sortExpression += \"\";\r\n            string[] parts = sortExpression.Split(' ');\r\n            bool descending = false;\r\n            string property = \"\";\r\n\r\n            if (parts.Length > 0 && parts[0] != \"\")\r\n            {\r\n                property = parts[0];\r\n\r\n                if (parts.Length > 1)\r\n                {\r\n                    descending = parts[1].ToLower().Contains(\"esc\");\r\n                }\r\n\r\n                PropertyInfo prop = typeof(T).GetProperty(property);\r\n\r\n                if (prop == null)\r\n                {\r\n                    throw new Exception(\"No property '\" + property + \"' in + \" + typeof(T).Name + \"'\");\r\n                }\r\n\r\n                if (descending)\r\n                    return list.OrderByDescending(x => prop.GetValue(x, null));\r\n                else\r\n                    return list.OrderBy(x => prop.GetValue(x, null));\r\n            }\r\n\r\n            return list;\r\n        }","class Customer\r\n{\r\n  public string Name{get;set;}\r\n}\r\n\r\nvar list = new List<Customer>();\r\n\r\nlist.OrderBy(\"Name desc\");"]}