{"Name":"IList<T> to Excel file","Description":"An extension method that produce a excel file of List<T>. This would be useful if you want to automatically generate a Excel out of any other primative data type collection I provided 1 overloads of this method, that accepts a Path as string to save excel file to location on disk.","Author":"Saurabh dubey","SubmittedOn":"12/5/2011 11:44:37 AM","Entries":["/// <summary>\r\n        /// Extension method to write list data to excel.\r\n        /// </summary>\r\n        /// <typeparam name=\"T\">Ganeric list</typeparam>\r\n        /// <param name=\"list\"></param>\r\n        /// <param name=\"PathToSave\">Path to save file.</param>\r\n        public static void ToExcel<T>(this List<T> list, string PathToSave)\r\n        {\r\n            #region Declarations\r\n\r\n            if (string.IsNullOrEmpty(PathToSave))\r\n            {\r\n                throw new Exception(\"Invalid file path.\");\r\n            }\r\n            else if(PathToSave.ToLower().Contains(\"\")==false)\r\n            {\r\n                throw new Exception(\"Invalid file path.\");\r\n            }\r\n\r\n            if (list == null)\r\n            {\r\n                throw new Exception(\"No data to export.\");\r\n            }\r\n          \r\n            Excel.Application excelApp = null;\r\n            Excel.Workbooks books = null;\r\n            Excel._Workbook book = null;\r\n            Excel.Sheets sheets = null;\r\n            Excel._Worksheet sheet = null;\r\n            Excel.Range range = null;\r\n            Excel.Font font = null;\r\n            // Optional argument variable\r\n            object optionalValue = Missing.Value;\r\n\r\n            string strHeaderStart = \"A2\";\r\n            string strDataStart = \"A3\";\r\n            #endregion\r\n\r\n            #region Processing\r\n            \r\n            \r\n            try\r\n            {\r\n                #region Init Excel app.\r\n                \r\n                \r\n                excelApp = new Excel.Application();\r\n                books = (Excel.Workbooks)excelApp.Workbooks;\r\n                book = (Excel._Workbook)(books.Add(optionalValue));\r\n                sheets = (Excel.Sheets)book.Worksheets;\r\n                sheet = (Excel._Worksheet)(sheets.get_Item(1));\r\n\r\n                #endregion\r\n\r\n                #region Creating Header\r\n\r\n\r\n                Dictionary<string, string> objHeaders = new Dictionary<string, string>();\r\n\r\n                PropertyInfo[] headerInfo = typeof(T).GetProperties();\r\n\r\n\r\n                foreach (var property in headerInfo)\r\n                {\r\n                    var attribute = property.GetCustomAttributes(typeof(DisplayNameAttribute), false)\r\n                                            .Cast<DisplayNameAttribute>().FirstOrDefault();\r\n                    objHeaders.Add(property.Name, attribute == null ?\r\n                                        property.Name : attribute.DisplayName);\r\n                }\r\n\r\n\r\n                range = sheet.get_Range(strHeaderStart, optionalValue);\r\n                range = range.get_Resize(1, objHeaders.Count);\r\n\r\n                range.set_Value(optionalValue, objHeaders.Values.ToArray());\r\n                range.BorderAround(Type.Missing, Excel.XlBorderWeight.xlThin, Excel.XlColorIndex.xlColorIndexAutomatic, Type.Missing);\r\n\r\n                font = range.Font;\r\n                font.Bold = true;\r\n                range.Interior.Color = Color.LightGray.ToArgb();\r\n\r\n                #endregion\r\n\r\n                #region Writing data to cell\r\n                \r\n                \r\n                int count = list.Count;\r\n                object[,] objData = new object[count, objHeaders.Count];\r\n\r\n                for (int j = 0; j < count; j++)\r\n                {\r\n                    var item = list[j];\r\n                    int i = 0;\r\n                    foreach (KeyValuePair<string, string> entry in objHeaders)\r\n                    {\r\n                        var y = typeof(T).InvokeMember(entry.Key.ToString(), BindingFlags.GetProperty, null, item, null);\r\n                        objData[j, i++] = (y == null) ? \"\" : y.ToString();\r\n                    }\r\n                }\r\n\r\n\r\n                range = sheet.get_Range(strDataStart, optionalValue);\r\n                range = range.get_Resize(count, objHeaders.Count);\r\n\r\n                range.set_Value(optionalValue, objData);\r\n                range.BorderAround(Type.Missing, Excel.XlBorderWeight.xlThin, Excel.XlColorIndex.xlColorIndexAutomatic, Type.Missing);\r\n\r\n                range = sheet.get_Range(strHeaderStart, optionalValue);\r\n                range = range.get_Resize(count + 1, objHeaders.Count);\r\n                range.Columns.AutoFit();\r\n\r\n                #endregion\r\n\r\n                #region Saving data and Opening Excel file.\r\n                         \r\n\r\n                if (string.IsNullOrEmpty(PathToSave) == false)\r\n                    book.SaveAs(PathToSave);\r\n\r\n                excelApp.Visible = true;\r\n               \r\n                #endregion\r\n\r\n                #region Release objects\r\n\r\n                try\r\n                {\r\n                    if (sheet != null)\r\n                        System.Runtime.InteropServices.Marshal.ReleaseComObject(sheet);\r\n                    sheet = null;\r\n\r\n                    if (sheets != null)\r\n                        System.Runtime.InteropServices.Marshal.ReleaseComObject(sheets);\r\n                    sheets = null;\r\n\r\n                    if (book != null)\r\n                        System.Runtime.InteropServices.Marshal.ReleaseComObject(book);\r\n                    book = null;\r\n\r\n                    if (books != null)\r\n                        System.Runtime.InteropServices.Marshal.ReleaseComObject(books);\r\n                    books = null;\r\n\r\n                    if (excelApp != null)\r\n                        System.Runtime.InteropServices.Marshal.ReleaseComObject(excelApp);\r\n                    excelApp = null;\r\n                }\r\n                catch (Exception ex)\r\n                {\r\n                    sheet = null;\r\n                    sheets = null;\r\n                    book = null;\r\n                    books = null;\r\n                    excelApp = null;\r\n                }\r\n                finally\r\n                {\r\n                    GC.Collect();\r\n                }\r\n\r\n                #endregion\r\n            }\r\n            catch (Exception ex)\r\n            {\r\n                throw ex;\r\n            }\r\n\r\n            #endregion\r\n        }","public class DummyData\r\n    {\r\n\r\n        [DisplayName(\"# ID\")]\r\n        public string ID { get; set; }\r\n\r\n        [DisplayName(\"Full Name\")]\r\n        public string Name { get; set; }\r\n\r\n\r\n        public string Address { get; set; }\r\n\r\n\r\n        public string Age { get; set; }\r\n\r\n\r\n    }\r\n\r\n\r\n\r\nprivate void button1_Click(object sender, EventArgs e)\r\n        {\r\n            List<DummyData> dataList = new List<DummyData>();\r\n\r\n            for (int i = 0; i < 10; i++)\r\n            {\r\n                dataList.Add(new DummyData()\r\n                {\r\n                    Address = \"Addresss \" + i,\r\n                    Age = \"Age \" + i,\r\n                    ID = \"ID \" + i,\r\n                    Name = \"Name \" + i\r\n                });\r\n            }\r\n\r\n            dataList.ToExcel(\"C:\\\\test.xls\");\r\n        }"]}