{"Name":"Standard Deviation LINQ extension method (with overloads)","Description":"Typical standard deviation formula set in LINQ fluent syntax. For when Average, Min, and Max just aren't enough information. Works with int, double, float.","Author":"ParrottSquawk","SubmittedOn":"8/6/2013 3:25:55 PM","Entries":["public static class Extensions\r\n    {\r\n        public static double StdDevP(this IEnumerable<int> source)\r\n        {\r\n            return StdDevLogic(source, 0);\r\n        }\r\n\r\n        public static double StdDevP(this IEnumerable<double> source)\r\n        {\r\n            return StdDevLogic(source, 0);\r\n        }\r\n\r\n        public static double StdDevP(this IEnumerable<float> source)\r\n        {\r\n            return StdDevLogic(source, 0);\r\n        }\r\n\r\n        public static double StdDev(this IEnumerable<int> source)\r\n        {\r\n            return StdDevLogic(source);\r\n        }\r\n\r\n        public static double StdDev(this IEnumerable<double> source)\r\n        {\r\n            return StdDevLogic(source);\r\n        }\r\n\r\n        public static float StdDev(this IEnumerable<float> source)\r\n        {\r\n            return StdDevLogic(source);\r\n        }\r\n\r\n        private static double StdDevLogic(this IEnumerable<double> source, int buffer = 1)\r\n        {\r\n            if (source == null)\r\n            { throw new ArgumentNullException(\"source\"); }\r\n\r\n            var data = source.ToList();\r\n            var average = data.Average();\r\n            var differences = data.Select(u => Math.Pow(average - u, 2.0)).ToList();\r\n            return Math.Sqrt(differences.Sum() / (differences.Count() - buffer));\r\n        }\r\n\r\n        private static double StdDevLogic(this IEnumerable<int> source, int buffer = 1)\r\n        {\r\n            return StdDevLogic(source.Select(x => (double)x));\r\n        }\r\n\r\n        private static float StdDevLogic(this IEnumerable<float> source, int buffer = 1)\r\n        {\r\n            if (source == null)\r\n            { throw new ArgumentNullException(\"source\"); }\r\n            var data = source.ToList();\r\n            var average = data.Average();\r\n            var differences = data.Select(u => Math.Pow(average - u, 2.0)).ToList();\r\n            return (float)Math.Sqrt(differences.Sum() / (differences.Count() - buffer));\r\n        }\r\n    }","var nums1 = new[] { 11, 12, 13, 12, 13, 15, 12, 14, 15, 15, 12, 14, 15 };\r\n            //Prints out the standard deviation of the entire data set (population)\r\n            Console.WriteLine(nums1.StdDevP());\r\n            //Prints out the standard deviation of the entire data set, but makes allowances for missing data points.\r\n            Console.WriteLine(nums1.Take(10).StdDev());\r\n            var nums2 = new[] { 11.0, 12.0, 13.0, 12.0, 13.0, 15.0, 12.0, 14.0, 15.0, 15.0, 12.0, 14.0, 15.0 };\r\n            //Prints out the standard deviation of the entire data set (population)\r\n            Console.WriteLine(nums2.StdDevP());\r\n            //Prints out the standard deviation of the entire data set, but makes allowances for missing data points.\r\n            Console.WriteLine(nums2.Take(10).StdDev());\r\n            var nums3 = new[] { 11.0f, 12.0f, 13.0f, 12.0f, 13.0f, 15.0f, 12.0f, 14.0f, 15.0f, 15.0f, 12.0f, 14.0f, 15.0f };\r\n            //Prints out the standard deviation of the entire data set (population)\r\n            Console.WriteLine(nums3.StdDevP());\r\n            //Prints out the standard deviation of the entire data set, but makes allowances for missing data points.\r\n            Console.WriteLine(nums3.Take(10).StdDev());"]}