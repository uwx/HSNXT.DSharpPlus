{"Name":"Split","Description":"somtimes one needs to split a larger collection into multiple smaller ones, this one does so use deferred execution","Author":"Eckhard Schwabe","SubmittedOn":"3/6/2009 7:51:35 AM","Entries":["public static IEnumerable<IEnumerable<T>> Split<T>(this IEnumerable<T> source, int splitSize)\r\n        {\r\n            using (IEnumerator<T> enumerator = source.GetEnumerator())\r\n            {\r\n                while (enumerator.MoveNext())\r\n                {\r\n                    yield return InnerSplit(enumerator, splitSize);\r\n                }\r\n            }\r\n\r\n        }\r\n       \r\n        private static IEnumerable<T> InnerSplit<T>(IEnumerator<T> enumerator, int splitSize)\r\n        {\r\n            int count = 0;\r\n            do\r\n            {\r\n                count++;\r\n                yield return enumerator.Current;\r\n            }\r\n            while (count % splitSize != 0\r\n                 && enumerator.MoveNext());\r\n        }","var nums = Enumerable.Range(0, 18);\r\n            var split = nums.Split(5);\r\n\r\n            foreach (var item in split)\r\n            {\r\n                foreach (var inner in item)\r\n                {\r\n                    Console.WriteLine(inner);\r\n                }\r\n            }"]}