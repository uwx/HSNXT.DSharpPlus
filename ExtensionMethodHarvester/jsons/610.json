{"Name":"EF IQueryable OrderBy string Extension","Description":"EF 에서 문자열로 정렬 컬럼 지정하고 싶을때 사용하면 됩니다.","Author":"Joseph Kwon","SubmittedOn":"2/4/2016 3:20:47 AM","Entries":["public static class IQueryableExtensions\r\n    {\r\n        public static IQueryable<T> OrderBy<T>(this IQueryable<T> source, string ordering, params object[] values)\r\n        {\r\n            var resultExp = CreateMethodCallExpression(source, \"OrderBy\", ordering);\r\n            return source.Provider.CreateQuery<T>(resultExp);\r\n        }\r\n\r\n        public static IQueryable<T> OrderByDescending<T>(this IQueryable<T> source, string ordering, params object[] values)\r\n        {\r\n            var resultExp = CreateMethodCallExpression(source, \"OrderByDescending\", ordering);\r\n            return source.Provider.CreateQuery<T>(resultExp);\r\n        }\r\n\r\n        public static IQueryable<T> ThenBy<T>(this IQueryable<T> source, string ordering, params object[] values)\r\n        {\r\n            var resultExp = CreateMethodCallExpression(source, \"ThenBy\", ordering);\r\n            return source.Provider.CreateQuery<T>(resultExp);\r\n        }\r\n\r\n        public static IQueryable<T> ThenByDescending<T>(this IQueryable<T> source, string ordering, params object[] values)\r\n        {\r\n            var resultExp = CreateMethodCallExpression(source, \"ThenByDescending\", ordering);\r\n            return source.Provider.CreateQuery<T>(resultExp);\r\n        }\r\n\r\n        private static MethodCallExpression CreateMethodCallExpression<T>(IQueryable<T> source, string methodName, string ordering)\r\n        {\r\n            var strings = ordering.Split('.');\r\n\r\n            var types = new List<Type>();\r\n            var properties = new List<PropertyInfo>();\r\n            var propertyAccesses = new List<MemberExpression>();\r\n\r\n            types.Add(typeof(T));\r\n\r\n            for (int i = 0; i < strings.Length; i++)\r\n            {\r\n                if (i != 0)\r\n                    types.Add(properties[i - 1].PropertyType);\r\n\r\n                properties.Add(types[i].GetProperty(strings[i]));\r\n            }\r\n\r\n            var parameter = Expression.Parameter(types[0], \"p\");\r\n\r\n            for (int i = 0; i < properties.Count; i++)\r\n            {\r\n                propertyAccesses.Add(i == 0\r\n                    ? Expression.MakeMemberAccess(parameter, properties[i])\r\n                    : Expression.MakeMemberAccess(propertyAccesses[i - 1], properties[i]));\r\n            }\r\n\r\n            var orderByExp = Expression.Lambda(propertyAccesses.Last(), parameter);\r\n\r\n            return Expression.Call(typeof(Queryable), methodName,\r\n                new Type[] { types.First(), properties.Last().PropertyType }, source.Expression, Expression.Quote(orderByExp));\r\n        }\r\n    }","_db.Entities.OrderBy(\"ComplexType.Property1\").ThenByDescending(\"ComplexType.Property2\");"]}