{"Name":"Extend","Description":"An extenssion function to work like the extend method of javascript. It takes the object and merge with oder, but only if the property of the other object has value.","Author":"Luiz","SubmittedOn":"10/2/2012 8:58:11 PM","Entries":["public static T Extend<T>(this T target, T source) where T : class\r\n        {\r\n            var properties =\r\n                target.GetType().GetProperties().Where(pi => pi.CanRead && pi.CanWrite);\r\n\r\n            foreach (var propertyInfo in properties)\r\n            {\r\n                var targetValue = propertyInfo.GetValue(target, null);\r\n                var defaultValue = propertyInfo.PropertyType.GetDefault();\r\n\r\n                if (targetValue != null && !targetValue.Equals(defaultValue)) continue;\r\n\r\n                var sourceValue = propertyInfo.GetValue(source, null);\r\n                propertyInfo.SetValue(target, sourceValue, null);\r\n            }\r\n\r\n            return target;\r\n        }\r\n\r\n        public static object GetDefault(this Type type)\r\n        {\r\n            // If no Type was supplied, if the Type was a reference type, or if the Type was a System.Void, return null\r\n            if (type == null || !type.IsValueType || type == typeof(void))\r\n                return null;\r\n\r\n            // If the supplied Type has generic parameters, its default value cannot be determined\r\n            if (type.ContainsGenericParameters)\r\n            {\r\n                throw new ArgumentException(\r\n                    \"{\" + MethodBase.GetCurrentMethod() + \"} Error:\\n\\nThe supplied value type <\" + type +\r\n                    \"> contains generic parameters, so the default value cannot be retrieved\");\r\n            }\r\n\r\n            // If the Type is a primitive type, or if it is another publicly-visible value type (i.e. struct), return a \r\n            //  default instance of the value type\r\n            if (type.IsPrimitive || !type.IsNotPublic)\r\n            {\r\n                try\r\n                {\r\n                    return Activator.CreateInstance(type);\r\n                }\r\n                catch (Exception e)\r\n                {\r\n                    throw new ArgumentException(\r\n                        \"{\" + MethodBase.GetCurrentMethod() +\r\n                        \"} Error:\\n\\nThe Activator.CreateInstance method could not \" +\r\n                        \"create a default instance of the supplied value type <\" + type +\r\n                        \"> (Inner Exception message: \\\"\" + e.Message + \"\\\")\", e);\r\n                }\r\n            }\r\n\r\n            // Fail with exception\r\n            throw new ArgumentException(\"{\" + MethodBase.GetCurrentMethod() + \"} Error:\\n\\nThe supplied value type <\" +\r\n                                        type +\r\n                                        \"> is not a publicly-visible type, so the default value cannot be retrieved\");\r\n        }","foo = foo.extend(foo2);"]}