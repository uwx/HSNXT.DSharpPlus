{"Name":"ExceptWithDuplicates","Description":"Returns a List of T except what's in a second list, without doing a distinct","Author":"Avraham Seff","SubmittedOn":"12/8/2014 10:05:36 PM","Entries":["public static List<TSource> ExceptWithDuplicates<TSource>(this IEnumerable<TSource> first, IEnumerable<TSource> second)\r\n\t{      \t\t\r\n\t\tList<TSource> s1 = second.ToList();\t\r\n\t\tList<TSource> ret = new List<TSource>();\r\n\r\n        first.ToList().ForEach(n =>\r\n\t\t{\r\n\t\t\tif (s1.Contains(n))\r\n                s1.Remove(n);\r\n            else\r\n                ret.Add(n);\r\n\r\n\t\t});\r\n\r\n        return ret;","void Main()\r\n{\r\n       List<int> a = new List<int> {1,8,8,3};\r\n       List<int> b = new List<int> {1,8,3};\r\n       \r\n       var x = a.ExceptWithDuplicates(b); //returns list with a single element: 8\r\n       var y = a.Except(b);       //returns an empty list\r\n\r\n}"]}