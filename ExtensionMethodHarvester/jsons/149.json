{"Name":"SelectRandom","Description":"This method selects a random element from an Enumerable with only one pass (O(N) complexity). It contains optimizations for argumens that implement ICollection<T> by using the Count property and the ElementAt LINQ method. The ElementAt LINQ method itself contains optimizations for IList<T>","Author":"Stilgar","SubmittedOn":"10/16/2010 2:21:32 PM","Entries":["using System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace Extensions\r\n{\r\n    public static class EnumerableExtensions\r\n    {\r\n        private static Random random = new Random();\r\n\r\n        public static T SelectRandom<T>(this IEnumerable<T> sequence)\r\n        {\r\n            if(sequence == null)\r\n            {\r\n                throw new ArgumentNullException();\r\n            }\r\n\r\n            if (!sequence.Any())\r\n            {\r\n                throw new ArgumentException(\"The sequence is empty.\");\r\n            }\r\n\r\n            //optimization for ICollection<T>\r\n            if (sequence is ICollection<T>)\r\n            {\r\n                ICollection<T> col = (ICollection<T>)sequence;\r\n                return col.ElementAt(random.Next(col.Count));\r\n            }\r\n\r\n            int count = 1;\r\n            T selected = default(T);\r\n\r\n            foreach (T element in sequence)\r\n            {\r\n                if (random.Next(count++) == 0)\r\n                {\r\n                    //Select the current element with 1/count probability\r\n                    selected = element;\r\n                }\r\n            }\r\n\r\n            return selected;\r\n        }\r\n\r\n    }\r\n}","int[] ints = new[] { 1, 2, 3, 4, 5 };\r\nConsole.WriteLine(ints.SelectRandom());\r\n\r\nIEnumerable<int> seq = Enumerable.Range(1, 5);\r\nConsole.WriteLine(seq.SelectRandom());"]}