{"Name":"ToView","Description":"Extend collections implementing IList to return a DataView. In cases where filters need to be applied to data, this extension will prove handy.","Author":"Felipe Ramos","SubmittedOn":"2/23/2011 4:37:03 PM","Entries":["/// <summary>\r\n        /// Extend any collection implementing IList to return a DataView.\r\n        /// </summary>\r\n        /// <param name=\"list\">IList (Could be List<Type>)</param>\r\n        /// <returns>DataView</returns>\r\n        public static DataView ToView(this IList list) \r\n        {\r\n            // Validate Source\r\n            if (list.Count < 1)                                             \r\n                return null;\r\n\r\n            // Initialize DataTable and get all properties from the first Item in the List.\r\n            DataTable table = new DataTable(list.GetType().Name);\r\n            PropertyInfo[] properties = list[0].GetType().GetProperties();\r\n\r\n            // Build all columns from properties found. (Custom attributes could be added later)\r\n            foreach (PropertyInfo info in properties)\r\n            {\r\n                try\r\n                {\r\n                    table.Columns.Add(new DataColumn(info.Name, info.PropertyType));\r\n                }\r\n                catch (NotSupportedException)\r\n                {\r\n                    // DataTable does not support Nullable types, we want to keep underlying type.\r\n                    table.Columns.Add(new DataColumn(info.Name, Nullable.GetUnderlyingType(info.PropertyType)));\r\n                }\r\n                catch (Exception)\r\n                {\r\n                    table.Columns.Add(new DataColumn(info.Name, typeof(object)));\r\n                }\r\n            }\r\n\r\n            // Add all rows\r\n            for (int index = 0; index < list.Count; index++)\r\n            {\r\n                object[] row = new object[properties.Length];\r\n\r\n                for (int i = 0; i < row.Length; i++)\r\n                {\r\n                    row[i] = properties[i].GetValue(list[index], null); // Get the value for each items property\r\n                }\r\n\r\n                table.Rows.Add(row);\r\n            }\r\n\r\n            return new DataView(table); ;\r\n        }","public class TestEntity\r\n        {\r\n            public int ID { get; private set; }\r\n            public string Name { get; set; }\r\n\r\n            public TestEntity(int ID, string Name)\r\n            {\r\n                this.ID = ID;\r\n                this.Name = Name;\r\n            }\r\n\r\n            public static List<TestEntity> GetTestData()\r\n            {\r\n                List<TestEntity> test = new List<TestEntity>();\r\n                test.Add(new TestEntity(1, \"Test 1\"));\r\n                test.Add(new TestEntity(2, \"Test 2\"));\r\n                test.Add(new TestEntity(3, \"Test 3\"));\r\n                test.Add(new TestEntity(4, \"Test 4\"));\r\n\r\n                return test;\r\n            }\r\n\r\n            public static System.Data.DataView GetView(List<TestEntity> list)\r\n            {\r\n                return list.ToView();\r\n            }\r\n        }"]}