{"Name":"Enum<T>.Parse() and Enum<T>.TryParse()","Description":"Parses the specified string value into the Enum type passed. Also contains a bool to determine whether or not the case should be ignored.","Author":"Dan Atkinson","SubmittedOn":"12/22/2009 1:01:34 PM","Entries":["public static class Enum<T>\r\n{\r\n  public static T Parse(string value)\r\n  {\r\n    return Enum<T>.Parse(value, true);\r\n  }\r\n\r\n  public static T Parse(string value, bool ignoreCase)\r\n  {\r\n    return (T)Enum.Parse(typeof(T), value, ignoreCase);\r\n  }\r\n\r\n  public static bool TryParse(string value, out T returnedValue)\r\n  {\r\n    return Enum<T>.TryParse(value, true, out returnedValue);\r\n  }\r\n\r\n  public static bool TryParse(string value, bool ignoreCase, out T returnedValue)\r\n  {\r\n    try\r\n    {\r\n      returnedValue = (T)Enum.Parse(typeof(T), value, ignoreCase);\r\n      return true;\r\n    }\r\n    catch\r\n    {\r\n      returnedValue = default(T);\r\n      return false;\r\n    }\r\n  }\r\n}","//Enum\r\npublic enum MyEnum\r\n{\r\n  Foo,\r\n  Bar,\r\n}\r\n\r\nMyEnum a = Enum<MyEnum>.Parse(\"foo\"); //Returns MyEnum.Foo\r\nMyEnum b = Enum<MyEnum>.Parse(\"foo\", false); //Fails as the parse is case sensitive\r\n\r\n//Try Parse\r\nMyEnum c = MyEnum.Foo;\r\n\r\nif(Enum<MyEnum>.TryParse(\"Fi\", out c) == false)\r\n{\r\n  //throw an error\r\n}"]}