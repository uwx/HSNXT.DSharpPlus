{"Name":"Clamp","Description":"Limit a value to a certain range. When the value is smaller/bigger than the range, snap it to the range border.","Author":"Steven Jeuris","SubmittedOn":"11/15/2011 9:42:21 AM","Entries":["/// <summary>\r\n///   Limit a value to a certain range. When the value is smaller/bigger than the range, snap it to the range border.\r\n/// </summary>\r\n/// <typeparam name = \"T\">The type of the value to limit.</typeparam>\r\n/// <param name = \"source\">The source for this extension method.</param>\r\n/// <param name = \"start\">The start of the interval, included in the interval.</param>\r\n/// <param name = \"end\">The end of the interval, included in the interval.</param>\r\npublic static T Clamp<T>( this T source, T start, T end )\r\n\twhere T : IComparable\r\n{\r\n\tbool isReversed = start.CompareTo( end ) > 0;\r\n\tT smallest = isReversed ? end : start;\r\n\tT biggest = isReversed ? start : end;\r\n\r\n\treturn source.CompareTo( smallest ) < 0\r\n\t\t? smallest\r\n\t\t: source.CompareTo( biggest ) > 0\r\n\t\t\t? biggest\r\n\t\t\t: source;\r\n}","int 50;\r\nint clamped = 50.Clamp( 0, 20 ); // clamped == 20"]}