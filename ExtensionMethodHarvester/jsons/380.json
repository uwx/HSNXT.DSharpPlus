{"Name":"IsSingle","Description":"Determines whether the collection has exactly one element","Author":"Brian Dukes","SubmittedOn":"10/21/2010 2:40:33 PM","Entries":["/// <summary>\r\n        /// Determines whether a sequence contains exactly one element.\r\n        /// </summary>\r\n        /// <typeparam name=\"T\">The type of the elements of <paramref name=\"source\"/></typeparam>\r\n        /// <param name=\"source\">The <see cref=\"IEnumerable{T}\"/> to check for singularity.</param>\r\n        /// <returns>\r\n        /// <c>true</c> if the <paramref name=\"source\"/> sequence contains exactly one element; otherwise, <c>false</c>.\r\n        /// </returns>\r\n        public static bool IsSingle<T>(this IEnumerable<T> source)\r\n        {\r\n            if (source == null) \r\n            {\r\n                throw new ArgumentNullException(\"source\");\r\n            }\r\n\r\n            using (var enumerator = source.GetEnumerator())\r\n            {\r\n                return enumerator.MoveNext() && !enumerator.MoveNext();\r\n            }\r\n        }","var items = new[] { 1, 2, 3 };\r\nitems.IsSingle(); // returns false\r\nitems.Take(1).IsSingle(); // returns true\r\nnew List<object>().IsSingle(); // returns false"]}