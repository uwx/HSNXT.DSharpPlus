{"Name":"Include","Description":"Type-safe Include: a completely type-safe way to include nested objects in scenarios with DomainServices and RIA in, for example, Silverlight applications. Example: Include(x=>x.Parent) instead of Include(\"Parent\"). A more detailed explanation can be found at http://www.chrismeijers.com/post/Type-safe-Include-for-RIA-DomainServices.aspx","Author":"Chris Meijers","SubmittedOn":"10/25/2010 5:25:00 PM","Entries":["using System.Linq.Expressions;\r\nusing System.Collections.Generic;\r\n\r\nnamespace System.Data.Objects\r\n{\r\n    public static class SilverExtensions\r\n    {\r\n        public static ObjectQuery<T> Include<T, T2>(this ObjectQuery<T> data, Expression<Func<T, ICollection<T2>>> property1, Expression<Func<T2, object>> property2)\r\n            where T : class\r\n            where T2 : class\r\n        {\r\n            var name1 = (property1.Body as MemberExpression).Member.Name;\r\n            var name2 = (property2.Body as MemberExpression).Member.Name;\r\n\r\n            return data.Include(name1 + \".\" + name2);\r\n        }\r\n        \r\n        public static ObjectQuery<T> Include<T, T2>(this ObjectQuery<T> data, Expression<Func<T, T2>> property1, Expression<Func<T2, object>> property2) where T : class\r\n        {\r\n            var name1 = (property1.Body as MemberExpression).Member.Name;\r\n            var name2 = (property2.Body as MemberExpression).Member.Name;\r\n\r\n            return data.Include(name1 + \".\" + name2);\r\n        }\r\n\r\n        public static ObjectQuery<T> Include<T>(this ObjectQuery<T> data, Expression<Func<T, object>> property) where T : class\r\n        {\r\n            var name = (property.Body as MemberExpression).Member.Name;\r\n\r\n            return data.Include(name);\r\n        }\r\n    }\r\n}","Instead of writing:\r\nObjectContext.Employee.Include(\"Address\").Include(\"Department.Division\");\r\n\r\none can now use a completely type-safe variant:\r\nObjectContext.Employee.Include(x=>x.Address).Include(y=>y.Department, z=>z.Division);\r\n\r\nThis finally gets rid of that nasty piece of untyping in an otherwise lovely type-safe system..."]}