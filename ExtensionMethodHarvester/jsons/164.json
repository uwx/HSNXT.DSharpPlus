{"Name":"SelectDistinct","Description":"\"SELECT DISTINCT\" over a DataTable. Handles multiple columns selection.","Author":"Jonnidip","SubmittedOn":"5/28/2009 3:15:59 PM","Entries":["public static class ExtensionMethods_DataTable\r\n{\r\n    #region Select Distinct\r\n    /// <summary>\r\n    /// \"SELECT DISTINCT\" over a DataTable\r\n    /// </summary>\r\n    /// <param name=\"SourceTable\">Input DataTable</param>\r\n    /// <param name=\"FieldNames\">Fields to select (distinct)</param>\r\n    /// <returns></returns>\r\n    public static DataTable SelectDistinct(this DataTable SourceTable, String FieldName)\r\n    {\r\n        return SelectDistinct(SourceTable, FieldName, String.Empty);\r\n    }\r\n\r\n    /// <summary>\r\n    ///\"SELECT DISTINCT\" over a DataTable\r\n    /// </summary>\r\n    /// <param name=\"SourceTable\">Input DataTable</param>\r\n    /// <param name=\"FieldNames\">Fields to select (distinct)</param>\r\n    /// <param name=\"Filter\">Optional filter to be applied to the selection</param>\r\n    /// <returns></returns>\r\n    public static DataTable SelectDistinct(this DataTable SourceTable, String FieldNames, String Filter)\r\n    {\r\n        DataTable dt = new DataTable();\r\n        String[] arrFieldNames = FieldNames.Replace(\" \", \"\").Split(',');\r\n        foreach (String s in arrFieldNames)\r\n        {\r\n            if (SourceTable.Columns.Contains(s))\r\n                dt.Columns.Add(s, SourceTable.Columns[s].DataType);\r\n            else\r\n                throw new Exception(String.Format(\"The column {0} does not exist.\", s));\r\n        }\r\n\r\n        Object[] LastValues = null;\r\n        foreach (DataRow dr in SourceTable.Select(Filter, FieldNames))\r\n        {\r\n            Object[] NewValues = GetRowFields(dr, arrFieldNames);\r\n            if (LastValues == null || !(ObjectComparison(LastValues, NewValues)))\r\n            {\r\n                LastValues = NewValues;\r\n                dt.Rows.Add(LastValues);\r\n            }\r\n        }\r\n\r\n        return dt;\r\n    }\r\n    #endregion\r\n\r\n    #region Private Methods\r\n    private static Object[] GetRowFields(DataRow dr, String[] arrFieldNames)\r\n    {\r\n        if (arrFieldNames.Length == 1)\r\n            return new Object[] { dr[arrFieldNames[0]] };\r\n        else\r\n        {\r\n            ArrayList itemArray = new ArrayList();\r\n            foreach (String field in arrFieldNames)\r\n                itemArray.Add(dr[field]);\r\n\r\n            return itemArray.ToArray();\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// Compares two values to see if they are equal. Also compares DBNULL.Value.\r\n    /// </summary>\r\n    /// <param name=\"A\">Object A</param>\r\n    /// <param name=\"B\">Object B</param>\r\n    /// <returns></returns>\r\n    private static Boolean ObjectComparison(Object a, Object b)\r\n    {\r\n        if (a == DBNull.Value && b == DBNull.Value) //  both are DBNull.Value\r\n            return true;\r\n        if (a == DBNull.Value || b == DBNull.Value) //  only one is DBNull.Value\r\n            return false;\r\n        return (a.Equals(b));  // value type standard comparison\r\n    }\r\n\r\n    /// <summary>\r\n    /// Compares two value arrays to see if they are equal. Also compares DBNULL.Value.\r\n    /// </summary>\r\n    /// <param name=\"A\">Object Array A</param>\r\n    /// <param name=\"B\">Object Array B</param>\r\n    /// <returns></returns>\r\n    private static Boolean ObjectComparison(Object[] a, Object[] b)\r\n    {\r\n        Boolean retValue = true;\r\n        Boolean singleCheck = false;\r\n\r\n        if (a.Length == b.Length)\r\n            for (Int32 i = 0; i < a.Length; i++)\r\n            {\r\n                if (!(singleCheck = ObjectComparison(a[i], b[i])))\r\n                {\r\n                    retValue = false;\r\n                    break;\r\n                }\r\n                retValue = retValue && singleCheck;\r\n            }\r\n\r\n        return retValue;\r\n    }\r\n    #endregion\r\n}","DataTable dt2 = dt.SelectDistinct(\"Column1, Column2\");"]}