{"Name":"InvokeAction","Description":"A set of Dispatcher extenstions that make it easy to cleanly queue lambdas on the Dispatcher.","Author":"Will Sullivan","SubmittedOn":"10/14/2010 7:32:16 PM","Entries":["internal static class DispatcherExtensions\r\n    {\r\n        /// <summary>\r\n        /// Invokes the specified <paramref name=\"action\"/> on the given <paramref name=\"dispatcher\"/>.\r\n        /// </summary>\r\n        /// <param name=\"dispatcher\">The dispatcher on which the <paramref name=\"action\"/> executes.</param>\r\n        /// <param name=\"action\">The <see cref=\"Action\"/> to execute.</param>\r\n        /// <param name=\"priority\">The <see cref=\"DispatcherPriority\"/>.  Defaults to <see cref=\"DispatcherPriority.ApplicationIdle\"/></param>\r\n        public static void InvokeAction(this Dispatcher dispatcher, Action action, DispatcherPriority priority)\r\n        {\r\n            if (dispatcher == null)\r\n                throw new ArgumentNullException(\"dispatcher\");\r\n            if (action == null)\r\n                throw new ArgumentNullException(\"action\");\r\n            dispatcher.Invoke(action, priority);\r\n        }\r\n        /// <summary>\r\n        /// Invokes the specified <paramref name=\"action\"/> on the given <paramref name=\"dispatcher\"/>.\r\n        /// </summary>\r\n        /// <typeparam name=\"T\">The type of the argument of the <paramref name=\"action\"/>.</typeparam>\r\n        /// <param name=\"dispatcher\">The dispatcher on which the <paramref name=\"action\"/> executes.</param>\r\n        /// <param name=\"action\">The <see cref=\"Action{T}\"/> to execute.</param>\r\n        /// <param name=\"arg\">The first argument of the action.</param>\r\n        /// <param name=\"priority\">The <see cref=\"DispatcherPriority\"/>.  Defaults to <see cref=\"DispatcherPriority.ApplicationIdle\"/></param>\r\n        public static void InvokeAction<T>(this Dispatcher dispatcher, Action<T> action, T arg, DispatcherPriority priority = DispatcherPriority.ApplicationIdle)\r\n        {\r\n            if (dispatcher == null)\r\n                throw new ArgumentNullException(\"dispatcher\");\r\n            if (action == null)\r\n                throw new ArgumentNullException(\"action\");\r\n            dispatcher.Invoke(action, priority, arg);\r\n        }\r\n        /// <summary>\r\n        /// Invokes the specified <paramref name=\"action\"/> on the given <paramref name=\"dispatcher\"/>.\r\n        /// </summary>\r\n        /// <typeparam name=\"T1\">The type of the first argument of the <paramref name=\"action\"/>.</typeparam>\r\n        /// <typeparam name=\"T2\">The type of the second argument of the <paramref name=\"action\"/>.</typeparam>\r\n        /// <param name=\"dispatcher\">The dispatcher on which the <paramref name=\"action\"/> executes.</param>\r\n        /// <param name=\"action\">The <see cref=\"Action{T1,T2}\"/> to execute.</param>\r\n        /// <param name=\"arg1\">The first argument of the action.</param>\r\n        /// <param name=\"arg2\">The second argument of the action.</param>\r\n        /// <param name=\"priority\">The <see cref=\"DispatcherPriority\"/>.  Defaults to <see cref=\"DispatcherPriority.ApplicationIdle\"/></param>\r\n        public static void InvokeAction<T1, T2>(this Dispatcher dispatcher, Action<T1, T2> action, T1 arg1, T2 arg2, DispatcherPriority priority = DispatcherPriority.ApplicationIdle)\r\n        {\r\n            if (dispatcher == null)\r\n                throw new ArgumentNullException(\"dispatcher\");\r\n            if (action == null)\r\n                throw new ArgumentNullException(\"action\");\r\n            dispatcher.Invoke(action, priority, arg1, arg2);\r\n        }\r\n        /// <summary>\r\n        /// Invokes the specified <paramref name=\"action\"/> on the given <paramref name=\"dispatcher\"/>.\r\n        /// </summary>\r\n        /// <typeparam name=\"T1\">The type of the first argument of the <paramref name=\"action\"/>.</typeparam>\r\n        /// <typeparam name=\"T2\">The type of the second argument of the <paramref name=\"action\"/>.</typeparam>\r\n        /// <typeparam name=\"T3\">The type of the third argument of the <paramref name=\"action\"/>.</typeparam>\r\n        /// <param name=\"dispatcher\">The dispatcher on which the <paramref name=\"action\"/> executes.</param>\r\n        /// <param name=\"action\">The <see cref=\"Action{T1,T2,T3}\"/> to execute.</param>\r\n        /// <param name=\"arg1\">The first argument of the action.</param>\r\n        /// <param name=\"arg2\">The second argument of the action.</param>\r\n        /// <param name=\"arg3\">The third argument of the action.</param>\r\n        /// <param name=\"priority\">The <see cref=\"DispatcherPriority\"/>.  Defaults to <see cref=\"DispatcherPriority.ApplicationIdle\"/></param>\r\n        public static void InvokeAction<T1, T2, T3>(this Dispatcher dispatcher, Action<T1, T2, T3> action, T1 arg1, T2 arg2, T3 arg3, DispatcherPriority priority = DispatcherPriority.ApplicationIdle)\r\n        {\r\n            if (dispatcher == null)\r\n                throw new ArgumentNullException(\"dispatcher\");\r\n            if (action == null)\r\n                throw new ArgumentNullException(\"action\");\r\n            dispatcher.Invoke(action, priority, arg1, arg2, arg3);\r\n        }\r\n    }","// old way\r\ndispatcher.Invoke((Action<string>)((x) => { Console.Write(x); }), \"annoying\");\r\n// this way\r\ndispatcher.InvokeAction(x=>Console.Write(X), \"yay lol\");"]}