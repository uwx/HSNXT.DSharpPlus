{"Name":"FolderSize","Description":"Using LINQ, gets the total size of a specified folder. It can also check sizes of subdirectory under it as a parameter.","Author":"Earljon Hidalgo","SubmittedOn":"3/28/2008 6:20:07 AM","Entries":["using System.IO;\r\n\r\npublic static class MyExtension\r\n{\r\n\tpublic static long FolderSize(this DirectoryInfo dir, bool bIncludeSub)\r\n\t{\r\n\t\tlong totalFolderSize = 0;\r\n\r\n\t\tif (!dir.Exists) return 0;\r\n\r\n\t\tvar files = from f in dir.GetFiles()\r\n\t\t\t\t\tselect f;\r\n\t\tforeach (var file in files) totalFolderSize += file.Length;\r\n\r\n\t\tif (bIncludeSub)\r\n\t\t{\r\n\t\t\tvar subDirs = from d in dir.GetDirectories()\r\n\t\t\t\t\t\t  select d;\r\n\t\t\tforeach (var subDir in subDirs) totalFolderSize += FolderSize(subDir, true);\r\n\t\t}\r\n\r\n\t\treturn totalFolderSize;\r\n\t}\r\n}","path = @\"D:\\INCOMING\\Books\";\r\nvar size = new DirectoryInfo(path).FolderSize(true);\r\nConsole.WriteLine(\"Size of {0} is {1}\", path, size);\r\n\r\n// you can format the size return by using my other extension method, FormatSize()\r\n// var size = new DirectoryInfo(path).FolderSize(true).FomatSize();"]}