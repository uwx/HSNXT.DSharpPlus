{"Name":"ComputeHash","Description":"Computes the hash of a string using one of the following algorithms: HMAC, HMACMD5, HMACSHA1, HMACSHA256, HMACSHA384, HMACSHA512,MACTripleDES, MD5, RIPEMD160, SHA1, SHA256, SHA384, SHA512.","Author":"Cosmin Pirlitu","SubmittedOn":"5/26/2012 3:31:23 PM","Entries":["using System.Text;\r\nusing System.Security.Cryptography;\r\n\r\npublic static class Hasher\r\n{\r\n    /// <summary>\r\n    /// Supported hash algorithms\r\n    /// </summary>\r\n    public enum eHashType\r\n    {\r\n        HMAC, HMACMD5, HMACSHA1, HMACSHA256, HMACSHA384, HMACSHA512,\r\n        MACTripleDES, MD5, RIPEMD160, SHA1, SHA256, SHA384, SHA512\r\n    }\r\n\r\n    private static byte[] GetHash(string input, eHashType hash)\r\n    {\r\n        byte[] inputBytes = Encoding.ASCII.GetBytes(input);\r\n\r\n        switch (hash)\r\n        {\r\n            case eHashType.HMAC:\r\n                return HMAC.Create().ComputeHash(inputBytes);\r\n\r\n            case eHashType.HMACMD5:\r\n                return HMACMD5.Create().ComputeHash(inputBytes);\r\n\r\n            case eHashType.HMACSHA1:\r\n                return HMACSHA1.Create().ComputeHash(inputBytes);\r\n\r\n            case eHashType.HMACSHA256:\r\n                return HMACSHA256.Create().ComputeHash(inputBytes);\r\n\r\n            case eHashType.HMACSHA384:\r\n                return HMACSHA384.Create().ComputeHash(inputBytes);\r\n\r\n            case eHashType.HMACSHA512:\r\n                return HMACSHA512.Create().ComputeHash(inputBytes);\r\n\r\n            case eHashType.MACTripleDES:\r\n                return MACTripleDES.Create().ComputeHash(inputBytes);\r\n\r\n            case eHashType.MD5:\r\n                return MD5.Create().ComputeHash(inputBytes);\r\n\r\n            case eHashType.RIPEMD160:\r\n                return RIPEMD160.Create().ComputeHash(inputBytes);\r\n\r\n            case eHashType.SHA1:\r\n                return SHA1.Create().ComputeHash(inputBytes);\r\n\r\n            case eHashType.SHA256:\r\n                return SHA256.Create().ComputeHash(inputBytes);\r\n\r\n            case eHashType.SHA384:\r\n                return SHA384.Create().ComputeHash(inputBytes);\r\n\r\n            case eHashType.SHA512:\r\n                return SHA512.Create().ComputeHash(inputBytes);\r\n\r\n            default:\r\n                return inputBytes;\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// Computes the hash of the string using a specified hash algorithm\r\n    /// </summary>\r\n    /// <param name=\"input\">The string to hash</param>\r\n    /// <param name=\"hashType\">The hash algorithm to use</param>\r\n    /// <returns>The resulting hash or an empty string on error</returns>\r\n    public static string ComputeHash(this string input, eHashType hashType)\r\n    {\r\n        try\r\n        {\r\n            byte[] hash = GetHash(input, hashType);\r\n            StringBuilder ret = new StringBuilder();\r\n\r\n            for (int i = 0; i < hash.Length; i++)\r\n                ret.Append(hash[i].ToString(\"x2\"));\r\n\r\n            return ret.ToString();\r\n        }\r\n        catch\r\n        {\r\n            return string.Empty;\r\n        }\r\n    }\r\n}","string s = \"Hello world!\";\r\nstring hash = s.ComputeHash(Hasher.eHashType.RIPEMD160);\r\n\r\nMessageBox.Show(hash);\r\n// 7f772647d88750add82d8e1a7a3e5c0902a346a3"]}