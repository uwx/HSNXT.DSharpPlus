{"Name":"Transpose","Description":"transposes the rows and columns of its argument","Author":"Edmondo Pentangelo","SubmittedOn":"2/5/2009 2:00:32 AM","Entries":["public static class LinqExtensions\r\n{\r\n    public static IEnumerable<IEnumerable<T>> Transpose<T>(this IEnumerable<IEnumerable<T>> values)\r\n    {\r\n        if (values.Count() == 0) \r\n            return values;\r\n        if (values.First().Count() == 0) \r\n            return Transpose(values.Skip(1));\r\n\r\n        var x = values.First().First();\r\n        var xs = values.First().Skip(1);\r\n        var xss = values.Skip(1);\r\n        return\r\n         new[] {new[] {x}\r\n           .Concat(xss.Select(ht => ht.First()))}\r\n           .Concat(new[] { xs }\r\n           .Concat(xss.Select(ht => ht.Skip(1)))\r\n           .Transpose());\r\n    }\r\n}","//Input: transpose [[1,2,3],[4,5,6],[7,8,9]]\r\n//Output: [[1,4,7],[2,5,8],[3,6,9]]\r\nvar result = new[] {new[] {1, 2, 3}, new[] {4, 5, 6}, new[] {7, 8, 9}}.Transpose();"]}