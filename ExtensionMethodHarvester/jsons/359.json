{"Name":"ToTiny","Description":"Converts a given URI to a TinyUrl.com address. Utilises the TinyUrl.com website so requires that the application can access the server","Author":"Craig Hawker","SubmittedOn":"4/6/2009 2:15:48 PM","Entries":["public static class UriMethods\r\n    {\r\n        public static Uri ToTiny(this Uri longUri)\r\n        {\r\n            WebRequest request = WebRequest.Create(String.Format\r\n                (\r\n                \"http://tinyurl.com/api-create.php?url={0}\",\r\n                UrlEncode(longUri.ToString())\r\n                ));\r\n            WebResponse response = request.GetResponse();\r\n            Uri returnUri = null;\r\n            using(System.IO.StreamReader reader = new System.IO.StreamReader(response.GetResponseStream()))\r\n            {\r\n                returnUri = new Uri(reader.ReadToEnd());\r\n            }\r\n            return returnUri;\r\n        }\r\n        #region Reflected from System.Web.HttpUtility\r\n        private static string UrlEncode(string str)\r\n        {\r\n            if (str == null)\r\n            {\r\n                return null;\r\n            }\r\n            return UrlEncode(str, Encoding.UTF8);\r\n\r\n        }\r\n        private static string UrlEncode(string str, Encoding e)\r\n        {\r\n            if (str == null)\r\n            {\r\n                return null;\r\n            }\r\n            return Encoding.ASCII.GetString(UrlEncodeToBytes(str, e));\r\n        }\r\n        private static byte[] UrlEncodeToBytes(string str, Encoding e)\r\n        {\r\n            if (str == null)\r\n            {\r\n                return null;\r\n            }\r\n            byte[] bytes = e.GetBytes(str);\r\n            return UrlEncodeBytesToBytesInternal(bytes, 0, bytes.Length, false);\r\n        }\r\n        private static byte[] UrlEncodeBytesToBytesInternal(byte[] bytes, int offset, int count, bool alwaysCreateReturnValue)\r\n        {\r\n            int num = 0;\r\n            int num2 = 0;\r\n            for (int i = 0; i < count; i++)\r\n            {\r\n                char ch = (char)bytes[offset + i];\r\n                if (ch == ' ')\r\n                {\r\n                    num++;\r\n                }\r\n                else if (!IsSafe(ch))\r\n                {\r\n                    num2++;\r\n                }\r\n            }\r\n            if ((!alwaysCreateReturnValue && (num == 0)) && (num2 == 0))\r\n            {\r\n                return bytes;\r\n            }\r\n            byte[] buffer = new byte[count + (num2 * 2)];\r\n            int num4 = 0;\r\n            for (int j = 0; j < count; j++)\r\n            {\r\n                byte num6 = bytes[offset + j];\r\n                char ch2 = (char)num6;\r\n                if (IsSafe(ch2))\r\n                {\r\n                    buffer[num4++] = num6;\r\n                }\r\n                else if (ch2 == ' ')\r\n                {\r\n                    buffer[num4++] = 0x2b;\r\n                }\r\n                else\r\n                {\r\n                    buffer[num4++] = 0x25;\r\n                    buffer[num4++] = (byte)IntToHex((num6 >> 4) & 15);\r\n                    buffer[num4++] = (byte)IntToHex(num6 & 15);\r\n                }\r\n            }\r\n            return buffer;\r\n        }\r\n        internal static bool IsSafe(char ch)\r\n        {\r\n            if ((((ch >= 'a') && (ch <= 'z')) || ((ch >= 'A') && (ch <= 'Z'))) || ((ch >= '0') && (ch <= '9')))\r\n            {\r\n                return true;\r\n            }\r\n            switch (ch)\r\n            {\r\n                case '\\'':\r\n                case '(':\r\n                case ')':\r\n                case '*':\r\n                case '-':\r\n                case '.':\r\n                case '_':\r\n                case '!':\r\n                    return true;\r\n            }\r\n            return false;\r\n        }\r\n        internal static char IntToHex(int n)\r\n        {\r\n            if (n <= 9)\r\n            {\r\n                return (char)(n + 0x30);\r\n            }\r\n            return (char)((n - 10) + 0x61);\r\n        }\r\n        #endregion\r\n    }","Uri longUri = new Uri(\"http://www.google.com\");\r\n            Uri shortUri = longUri.ToTiny();"]}