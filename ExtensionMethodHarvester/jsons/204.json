{"Name":"ToCsv","Description":"Returns a string that represent a csv representation of the referenced T in the IEnumerable<T>. You can also generate a columns header (the first row) with the name of the serialized properties. You can specify the name of the properties to include in the csv file. If you don't specify anything it will includes all the public properties.","Author":"Lorenzo Melato","SubmittedOn":"3/16/2011 4:45:19 PM","Entries":["public static string ToCsv<T>(this IEnumerable<T> instance, bool includeColumnHeader, string[] properties)\r\n\t\t{\r\n\t\t\tif (instance == null)\r\n\t\t\t\treturn null;\r\n\r\n\t\t\tvar csv = new StringBuilder();\r\n\r\n\t\t\tif (includeColumnHeader)\r\n\t\t\t{\r\n\t\t\t\tvar header = new StringBuilder();\r\n\t\t\t\tforeach (var property in properties)\r\n\t\t\t\t\theader.AppendFormat(\"{0},\", property);\r\n\r\n\t\t\t\tcsv.AppendLine(header.ToString(0, header.Length - 1));\r\n\t\t\t}\r\n\r\n\t\t\tforeach (var item in instance)\r\n\t\t\t{\r\n\t\t\t\tvar row = new StringBuilder();\r\n\r\n\t\t\t\tforeach (var property in properties)\r\n\t\t\t\t\trow.AppendFormat(\"{0},\", item.GetPropertyValue<object>(property));\r\n\r\n\t\t\t\tcsv.AppendLine(row.ToString(0, row.Length - 1));\r\n\t\t\t}\r\n\r\n\t\t\treturn csv.ToString();\r\n\t\t}\r\n\r\n\t\tpublic static string ToCsv<T>(this IEnumerable<T> instance, bool includeColumnHeader)\r\n\t\t{\r\n\t\t\tif (instance == null)\r\n\t\t\t\treturn null;\r\n\r\n\t\t\tvar properties = (from p in typeof(T).GetProperties()\r\n\t\t\t\t\t\t\t  select p.Name).ToArray();\r\n\r\n\t\t\treturn ToCsv(instance, includeColumnHeader, properties);\r\n\t\t}","var list = new List<Employee>();\r\nlist.Add(new List(){FirstName = \"Jon\", LastName = \"Doe\"});\r\nlist.Add(new List(){FirstName = \"Scott\", LastName = \"Gu\"});\r\n\r\nstring csv = list.ToCsv(true);\r\n\r\nor\r\n\r\nstring csv = list.ToCsv(true, new[] {\"FirstName\", \"LastName\"});"]}