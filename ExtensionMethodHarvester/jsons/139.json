{"Name":"Mask","Description":"A set of extension methods that make it easy to mask a string (to protect account numbers or other personal data). For example, you could mask a SSN of 123456789 to be ******789.","Author":"James Michael Hare (BlackRabbitCoder)","SubmittedOn":"10/14/2010 8:21:08 PM","Entries":["using System;\r\nusing System.Text;\r\n\r\n/// <summary>\r\n/// An enumeration of the types of masking styles for the Mask() extension method\r\n/// of the string class.\r\n/// </summary>\r\npublic enum MaskStyle\r\n{\r\n\t/// <summary>\r\n\t/// Masks all characters within the masking region, regardless of type.\r\n\t/// </summary>\r\n\tAll,\r\n\r\n\t/// <summary>\r\n\t/// Masks only alphabetic and numeric characters within the masking region.\r\n\t/// </summary>\r\n\tAlphaNumericOnly,\r\n}\r\n\r\n/// <summary>\r\n/// Utility class for string manipulation.\r\n/// </summary>\r\npublic static class StringExtensions\r\n{\r\n\t/// <summary>\r\n\t/// Default masking character used in a mask.\r\n\t/// </summary>\r\n\tpublic static readonly char DefaultMaskCharacter = '*';\r\n\r\n\r\n\t/// <summary>\r\n\t/// Returns true if the string is non-null and at least the specified number of characters.\r\n\t/// </summary>\r\n\t/// <param name=\"value\">The string to check.</param>\r\n\t/// <param name=\"length\">The minimum length.</param>\r\n\t/// <returns>True if string is non-null and at least the length specified.</returns>\r\n\t/// <exception>throws ArgumentOutOfRangeException if length is not a non-negative number.</exception>\r\n\tpublic static bool IsLengthAtLeast(this string value, int length)\r\n\t{\r\n\t\tif (length < 0)\r\n\t\t{\r\n\t\t\tthrow new ArgumentOutOfRangeException(\"length\", length,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"The length must be a non-negative number.\");\r\n\t\t}\r\n\r\n\t\treturn value != null\r\n\t\t\t\t\t? value.Length >= length\r\n\t\t\t\t\t: false;\r\n\t}\r\n\r\n\t/// <summary>\r\n\t/// Mask the source string with the mask char except for the last exposed digits.\r\n\t/// </summary>\r\n\t/// <param name=\"sourceValue\">Original string to mask.</param>\r\n\t/// <param name=\"maskChar\">The character to use to mask the source.</param>\r\n\t/// <param name=\"numExposed\">Number of characters exposed in masked value.</param>\r\n\t/// <param name=\"style\">The masking style to use (all characters or just alpha-nums).</param>\r\n\t/// <returns>The masked account number.</returns>\r\n\tpublic static string Mask(this string sourceValue, char maskChar, int numExposed, MaskStyle style)\r\n\t{\r\n\t\tvar maskedString = sourceValue;\r\n\r\n\t\tif (sourceValue.IsLengthAtLeast(numExposed))\r\n\t\t{\r\n\t\t\tvar builder = new StringBuilder(sourceValue.Length);\r\n\t\t\tint index = maskedString.Length - numExposed;\r\n\r\n\t\t\tif (style == MaskStyle.AlphaNumericOnly)\r\n\t\t\t{\r\n\t\t\t\tCreateAlphaNumMask(builder, sourceValue, maskChar, index);\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tbuilder.Append(maskChar, index);\r\n\t\t\t}\r\n\r\n\t\t\tbuilder.Append(sourceValue.Substring(index));\r\n\t\t\tmaskedString = builder.ToString();\r\n\t\t}\r\n\r\n\t\treturn maskedString;\r\n\t}\r\n\r\n\t/// <summary>\r\n\t/// Mask the source string with the mask char except for the last exposed digits.\r\n\t/// </summary>\r\n\t/// <param name=\"sourceValue\">Original string to mask.</param>\r\n\t/// <param name=\"maskChar\">The character to use to mask the source.</param>\r\n\t/// <param name=\"numExposed\">Number of characters exposed in masked value.</param>\r\n\t/// <returns>The masked account number.</returns>\r\n\tpublic static string Mask(this string sourceValue, char maskChar, int numExposed)\r\n\t{\r\n\t\treturn Mask(sourceValue, maskChar, numExposed, MaskStyle.All);\r\n\t}\r\n\r\n\t/// <summary>\r\n\t/// Mask the source string with the mask char.\r\n\t/// </summary>\r\n\t/// <param name=\"sourceValue\">Original string to mask.</param>\r\n\t/// <param name=\"maskChar\">The character to use to mask the source.</param>\r\n\t/// <returns>The masked account number.</returns>\r\n\tpublic static string Mask(this string sourceValue, char maskChar)\r\n\t{\r\n\t\treturn Mask(sourceValue, maskChar, 0, MaskStyle.All);\r\n\t}\r\n\r\n\t/// <summary>\r\n\t/// Mask the source string with the default mask char except for the last exposed digits.\r\n\t/// </summary>\r\n\t/// <param name=\"sourceValue\">Original string to mask.</param>\r\n\t/// <param name=\"numExposed\">Number of characters exposed in masked value.</param>\r\n\t/// <returns>The masked account number.</returns>\r\n\tpublic static string Mask(this string sourceValue, int numExposed)\r\n\t{\r\n\t\treturn Mask(sourceValue, DefaultMaskCharacter, numExposed, MaskStyle.All);\r\n\t}\r\n\r\n\t/// <summary>\r\n\t/// Mask the source string with the default mask char.\r\n\t/// </summary>\r\n\t/// <param name=\"sourceValue\">Original string to mask.</param>\r\n\t/// <returns>The masked account number.</returns>\r\n\tpublic static string Mask(this string sourceValue)\r\n\t{\r\n\t\treturn Mask(sourceValue, DefaultMaskCharacter, 0, MaskStyle.All);\r\n\t}\r\n\r\n\t/// <summary>\r\n\t/// Mask the source string with the mask char.\r\n\t/// </summary>\r\n\t/// <param name=\"sourceValue\">Original string to mask.</param>\r\n\t/// <param name=\"maskChar\">The character to use to mask the source.</param>\r\n\t/// <param name=\"style\">The masking style to use (all characters or just alpha-nums).</param>\r\n\t/// <returns>The masked account number.</returns>\r\n\tpublic static string Mask(this string sourceValue, char maskChar, MaskStyle style)\r\n\t{\r\n\t\treturn Mask(sourceValue, maskChar, 0, style);\r\n\t}\r\n\r\n\t/// <summary>\r\n\t/// Mask the source string with the default mask char except for the last exposed digits.\r\n\t/// </summary>\r\n\t/// <param name=\"sourceValue\">Original string to mask.</param>\r\n\t/// <param name=\"numExposed\">Number of characters exposed in masked value.</param>\r\n\t/// <param name=\"style\">The masking style to use (all characters or just alpha-nums).</param>\r\n\t/// <returns>The masked account number.</returns>\r\n\tpublic static string Mask(this string sourceValue, int numExposed, MaskStyle style)\r\n\t{\r\n\t\treturn Mask(sourceValue, DefaultMaskCharacter, numExposed, style);\r\n\t}\r\n\r\n\t/// <summary>\r\n\t/// Mask the source string with the default mask char.\r\n\t/// </summary>\r\n\t/// <param name=\"sourceValue\">Original string to mask.</param>\r\n\t/// <param name=\"style\">The masking style to use (all characters or just alpha-nums).</param>\r\n\t/// <returns>The masked account number.</returns>\r\n\tpublic static string Mask(this string sourceValue, MaskStyle style)\r\n\t{\r\n\t\treturn Mask(sourceValue, DefaultMaskCharacter, 0, style);\r\n\t}\r\n\r\n\t/// <summary>\r\n\t/// Masks all characters for the specified length.\r\n\t/// </summary>\r\n\t/// <param name=\"buffer\">String builder to store result in.</param>\r\n\t/// <param name=\"source\">The source string to pull non-alpha numeric characters.</param>\r\n\t/// <param name=\"mask\">Masking character to use.</param>\r\n\t/// <param name=\"length\">Length of the mask.</param>\r\n\tprivate static void CreateAlphaNumMask(StringBuilder buffer, string source, char mask, int length)\r\n\t{\r\n\t\tfor (int i = 0; i < length; i++)\r\n\t\t{\r\n\t\t\tbuffer.Append(char.IsLetterOrDigit(source[i])\r\n\t\t\t\t\t\t\t? mask\r\n\t\t\t\t\t\t\t: source[i]);\r\n\t\t}\r\n\t}\r\n}","var someInput = \"123-45-6789\"\r\n\r\nvar maskedId = someInput.Mask('X', 3);\r\n\r\n// outputs: XXXXXXXX789\r\nConsole.WriteLine(maskedId);\r\n\r\nvar maskedWithDashes = someInput.Mask('*', 3, MaskStyle.AlphaNumericOnly);\r\n\r\n// outputs: ***-**-*789\r\nConsole.WriteLine(maskedWithDashes);"]}