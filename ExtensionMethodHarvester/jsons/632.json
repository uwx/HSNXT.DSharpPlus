{"Name":"Replace","Description":"Use this extention method with a lambda expression to replace the first item that satisfies the condition","Author":"Brecht Bocket","SubmittedOn":"6/24/2016 9:01:30 AM","Entries":["public static IEnumerable<TSource> Replace<TSource, Tkey>(this IList<TSource> source, TSource replacement, Func<TSource, Tkey> selector)\r\n        {\r\n            foreach (var item in source)\r\n            {\r\n                var key = selector(item);\r\n\r\n                if (key.Equals(true))\r\n                {\r\n                    int index = source.IndexOf(item);\r\n                    source.Remove(item);\r\n                    source.Insert(index, replacement);\r\n                    break;\r\n                }\r\n            }\r\n            return source;\r\n        }","public static void BookReplace()\r\n        {\r\n            var books = new List<Book>\r\n            {\r\n                new Book { Author = \"Robert Martin\", Title = \"Clean Code\", Pages = 464 },\r\n                new Book { Author = \"Oliver Sturm\", Title = \"Functional Programming in C#\", Pages = 270 },\r\n                new Book { Author = \"Martin Fowler\", Title = \"Patterns of Enterprise Application Architecture\", Pages = 533 },\r\n                new Book { Author = \"Bill Wager\", Title = \"Effective C#\", Pages = 328 },\r\n            };\r\n\r\n            Book replacementBook = new Book\r\n            {\r\n                Author = \"Test\",\r\n                Pages = 152,\r\n                Title = \"Once upon a test\"\r\n            };\r\n\r\n            books.Replace(replacementBook, item => item.Author == \"Bill Wager\");\r\n        }"]}