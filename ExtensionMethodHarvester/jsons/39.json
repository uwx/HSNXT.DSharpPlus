{"Name":"ToCSV","Description":"An extension method that produce a comman separated values of string out of an IEnumerable<T>. This would be useful if you want to automatically generate a CSV out of integer, string, or any other primative data type collection or array. I provided 2 overloads of this method. One of them accepts a separator and the other uses comma \",\" as default separator. Also I am using another shortcut extension method for foreach loop.","Author":"Muhammad Mosa","SubmittedOn":"12/16/2009 11:40:16 AM","Entries":["public static void Each<T>(this IEnumerable<T> enumerable, Action<T> action)\r\n{\r\n    foreach (T item in enumerable)\r\n    {\r\n        action(item);\r\n    }\r\n}\r\n\r\npublic static string ToCSV<T>(this IEnumerable<T> instance, char separator)\r\n{\r\n    StringBuilder csv;\r\n    if (instance != null)\r\n    {\r\n        csv = new StringBuilder();\r\n        instance.Each(value => csv.AppendFormat(\"{0}{1}\", value, separator));\r\n        return csv.ToString(0, csv.Length - 1);\r\n    }\r\n    return null;\r\n}\r\n\r\npublic static string ToCSV<T>(this IEnumerable<T> instance)\r\n{\r\n    StringBuilder csv;\r\n    if (instance != null)\r\n    {\r\n        csv = new StringBuilder();\r\n        instance.Each(v => csv.AppendFormat(\"{0},\", v));\r\n        return csv.ToString(0, csv.Length - 1);\r\n    }\r\n    return null;\r\n}","[TestMethod]\r\npublic void ToCSV_Should_Return_Correct_Comma_Separated_Values()\r\n{\r\n    var values = new[] {1, 2, 3, 4, 5};\r\n\r\n    string csv = values.ToCSV();\r\n\r\n    Assert.AreEqual(\"1,2,3,4,5\",csv);\r\n}\r\n\r\n[TestMethod]\r\npublic void ToCSV_Should_Return_Correct_Comma_Separated_Values_Using_Specified_Separator()\r\n{\r\n    var values = new[] { 1, 2, 3, 4, 5 };\r\n\r\n    string csv = values.ToCSV(';');\r\n\r\n    Assert.AreEqual(\"1;2;3;4;5\", csv);\r\n}"]}