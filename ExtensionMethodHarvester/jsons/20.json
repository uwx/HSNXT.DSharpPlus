{"Name":"Generic Enum to List<T> converter","Description":"http://devlicio.us/blogs/joe_niland/archive/2006/10/10/Generic-Enum-to-List_3C00_T_3E00_-converter.aspx","Author":"Joe Niland","SubmittedOn":"10/16/2010 11:56:11 PM","Entries":["public static List<T> EnumToList<T>()\r\n        {\r\n            Type enumType = typeof (T);\r\n\r\n            // Can't use type constraints on value types, so have to do check like this\r\n            if (enumType.BaseType != typeof(Enum))\r\n                throw new ArgumentException(\"T must be of type System.Enum\");\r\n            \r\n            Array enumValArray = Enum.GetValues(enumType);\r\n\r\n            List<T> enumValList = new List<T>(enumValArray.Length);\r\n\r\n            foreach (int val in enumValArray) {\r\n                enumValList.Add((T)Enum.Parse(enumType, val.ToString()));\r\n            }\r\n\r\n            return enumValList;\r\n        }","List<DayOfWeek> weekdays =\r\n    EnumHelper.EnumToList<DayOfWeek>().FindAll(\r\n        delegate (DayOfWeek x)\r\n        {\r\n            return x != DayOfWeek.Sunday && x != DayOfWeek.Saturday;\r\n        });"]}