{"Name":"Flatten","Description":"Flatten an IEnumerable<string>","Author":"Yves Schelpe (yves.schelpe@gmail.com)","SubmittedOn":"9/7/2013 5:47:01 PM","Entries":["/// <summary>\r\n        /// Flattens an <see cref=\"IEnumerable\"/> of <see cref=\"String\"/> objects to a single string, seperated by an optional seperator and with optional head and tail.\r\n        /// </summary>\r\n        /// <param name=\"strings\">The string objects to be flattened.</param>\r\n        /// <param name=\"seperator\">The seperator to be used between each string object.</param>\r\n        /// <param name=\"head\">The string to be used at the beginning of the flattened string. Defaulted to an empty string.</param>        \r\n        /// <param name=\"tail\">The string to be used at the end of the flattened string. Defaulted to an empty string.</param>\r\n        /// <returns>Single string containing all elements seperated by the given seperator, with optionally a head and/or tail.</returns>\r\n        public static string Flatten(this IEnumerable<string> strings, string seperator, string head, string tail)\r\n        {\r\n            // If the collection is null, or if it contains zero elements,\r\n            // then return an empty string.\r\n            if (strings == null || strings.Count() == 0)\r\n                return String.Empty;\r\n\r\n            // Build the flattened string\r\n            var flattenedString = new StringBuilder();\r\n\r\n            flattenedString.Append(head);\r\n            foreach (var s in strings)\r\n                flattenedString.AppendFormat(\"{0}{1}\", s, seperator); // Add each element with the given seperator.\r\n            flattenedString.Remove(flattenedString.Length - seperator.Length, seperator.Length); // Remove the last seperator\r\n            flattenedString.Append(tail);\r\n\r\n            // Return the flattened string\r\n            return flattenedString.ToString();\r\n        }\r\n\r\n        /// <summary>\r\n        /// Flattens an <see cref=\"IEnumerable\"/> of <see cref=\"String\"/> objects to a single string with optional prefix and/or suffix for each string element.\r\n        /// </summary>\r\n        /// <param name=\"strings\">The <see cref=\"IEnumerable\"/> of <see cref=\"String\"/> objects to flatten.</param>\r\n        /// <param name=\"prefix\">String placed before each string element.</param>\r\n        /// <param name=\"suffix\">String placed after each string element.</param>\r\n        /// <param name=\"head\">The string to be used at the beginning of the flattened string. Defaulted to an empty string.</param>        \r\n        /// <param name=\"tail\">The string to be used at the end of the flattened string. Defaulted to an empty string.</param>\r\n        /// <returns>Single string containing all elements with the given preifx and/or suffix and with optionally a head and/or tail.</returns>\r\n        public static string Flatten(this IEnumerable<string> strings, string prefix, string suffix, string head, string tail)\r\n        {\r\n            // Return the flattened string\r\n            return strings\r\n                .Select(s => \"{0}{1}{2}\".WithFormat(prefix, s, suffix))\r\n                .Flatten(String.Empty, head, tail);\r\n        }","[Fact]\r\n        public void Can_Flatten_With_Seperator()\r\n        {\r\n            // Arrange\r\n            var list = Infrastructure.GetListOfStrings().Take(3);\r\n            var expected = \"monday; tuesday; wednesday\";\r\n\r\n            // Act\r\n            var sut = list.Flatten(\"; \", \"\", \"\");\r\n\r\n            // Assert\r\n            Assert.Equal<string>(expected, sut);\r\n        }\r\n\r\n        [Fact]\r\n        public void Can_Flatten_With_Head_And_Tail()\r\n        {\r\n            // Arrange\r\n            var list = Infrastructure.GetListOfStrings().Take(3);\r\n            var expected = \"Days: monday, tuesday, wednesday.\";\r\n\r\n            // Act\r\n            var sut = list.Flatten(\", \", \"Days: \", \".\");\r\n\r\n            // Assert\r\n            Assert.Equal<string>(expected, sut);\r\n        }\r\n\r\n        [Fact]\r\n        public void Can_Flatten_With_Prefix_And_Suffix()\r\n        {\r\n            // Arrange\r\n            var list = Infrastructure.GetListOfStrings().Take(2);\r\n            var expected = \"<days><day>monday</day><day>tuesday</day></days>\";\r\n\r\n            // Act\r\n            var sut = list.Flatten(\"<day>\", \"</day>\", \"<days>\", \"</days>\");\r\n\r\n            // Assert\r\n            Assert.Equal<string>(expected, sut);\r\n        }\r\n\r\n        [Fact]\r\n        public void Returns_Empty_String_With_Empty_Source()\r\n        {\r\n            // Arrange\r\n            var list = Infrastructure.GetEmptyListOfStrings();\r\n            var expected = String.Empty;\r\n\r\n            // Act\r\n            var sut = list.Flatten(\"; \", \"head\", \"tail\");\r\n\r\n            // Assert\r\n            Assert.Equal<string>(expected, sut);\r\n        }\r\n\r\n        [Fact]\r\n        public void Returns_Empty_String_When_Source_Is_Null()\r\n        {\r\n            // Arrange\r\n            var list = (List<string>)null;\r\n            var expected = String.Empty;\r\n\r\n            // Act\r\n            var sut = list.Flatten(\"; \", \"head\", \"tail\");\r\n\r\n            // Assert\r\n            Assert.Equal<string>(expected, sut);\r\n        }"]}