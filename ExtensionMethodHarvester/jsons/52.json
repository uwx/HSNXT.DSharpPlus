{"Name":"Simplify usage of XmlSerializer","Description":"Extension for simplify usage of XmlSerializer class. Add extension to any object serialize it to xml. Add extension to string and stream to deserialize objects. All extensions with first check about default constructor","Author":"WaSaMaSa","SubmittedOn":"10/20/2010 5:05:52 AM","Entries":["/// <summary>\r\n  ///   Extensions for supporting xml serialization by <see cref = \"XmlSerializer\" />\r\n  /// </summary>\r\n  public static class XmlSerializerExtensions\r\n  {\r\n    #region Private fields\r\n    private static readonly Dictionary<RuntimeTypeHandle, XmlSerializer> ms_serializers = new Dictionary<RuntimeTypeHandle, XmlSerializer>();\r\n    #endregion\r\n    #region Public methods\r\n    /// <summary>\r\n    ///   Serialize object to xml string by <see cref = \"XmlSerializer\" />\r\n    /// </summary>\r\n    /// <typeparam name = \"T\"></typeparam>\r\n    /// <param name = \"value\"></param>\r\n    /// <returns></returns>\r\n    public static string ToXml<T>(this T value)\r\n        where T : new()\r\n    {\r\n      var _serializer = GetValue(typeof (T));\r\n      using (var _stream = new MemoryStream())\r\n      {\r\n        using (var _writer = new XmlTextWriter(_stream, new UTF8Encoding()))\r\n        {\r\n          _serializer.Serialize(_writer, value);\r\n          return Encoding.UTF8.GetString(_stream.ToArray());\r\n        }\r\n      }\r\n    }\r\n    /// <summary>\r\n    ///   Serialize object to stream by <see cref = \"XmlSerializer\" />\r\n    /// </summary>\r\n    /// <typeparam name = \"T\"></typeparam>\r\n    /// <param name = \"value\"></param>\r\n    /// <param name = \"stream\"></param>\r\n    public static void ToXml<T>(this T value, Stream stream)\r\n        where T : new()\r\n    {\r\n      var _serializer = GetValue(typeof (T));\r\n      _serializer.Serialize(stream, value);\r\n    }\r\n\r\n    /// <summary>\r\n    ///   Deserialize object from string\r\n    /// </summary>\r\n    /// <typeparam name = \"T\">Type of deserialized object</typeparam>\r\n    /// <param name = \"srcString\">Xml source</param>\r\n    /// <returns></returns>\r\n    public static T FromXml<T>(this string srcString)\r\n        where T : new()\r\n    {\r\n      var _serializer = GetValue(typeof (T));\r\n      using (var _stringReader = new StringReader(srcString))\r\n      {\r\n        using (XmlReader _reader = new XmlTextReader(_stringReader))\r\n        {\r\n          return (T) _serializer.Deserialize(_reader);\r\n        }\r\n      }\r\n    }\r\n    /// <summary>\r\n    ///   Deserialize object from stream\r\n    /// </summary>\r\n    /// <typeparam name = \"T\">Type of deserialized object</typeparam>\r\n    /// <param name = \"source\">Xml source</param>\r\n    /// <returns></returns>\r\n    public static T FromXml<T>(this Stream source)\r\n        where T : new()\r\n    {\r\n      var _serializer = GetValue(typeof (T));\r\n      return (T) _serializer.Deserialize(source);\r\n    }\r\n    #endregion\r\n    #region Private methods\r\n    private static XmlSerializer GetValue(Type type)\r\n    {\r\n      XmlSerializer _serializer;\r\n      if (!ms_serializers.TryGetValue(type.TypeHandle, out _serializer))\r\n      {\r\n        lock (ms_serializers)\r\n        {\r\n          if (!ms_serializers.TryGetValue(type.TypeHandle, out _serializer))\r\n          {\r\n            _serializer = new XmlSerializer(type);\r\n            ms_serializers.Add(type.TypeHandle, _serializer);\r\n          }\r\n        }\r\n      }\r\n      return _serializer;\r\n    }\r\n    #endregion\r\n  }","List<string> list = new List<string>{\"aaa\",\"bbb\",\"ccc\"};\r\nList<string> listActual = null;\r\n//Xml serialize to string\r\nstring xml = list.ToXml();\r\n\r\n//Deserialize from string\r\nlistActual = xml.FromXml<List<string>>();\r\n\r\nusing(var stream = new MemoryStream())\r\n{\r\n   //Serialize to stream\r\n   list.ToXml(stream);\r\n\r\n   stream.Position = 0; \r\n   //Deserialize\r\n   listActual = stream.FromXml<List<string>>();\r\n}"]}