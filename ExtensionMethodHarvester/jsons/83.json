{"Name":"Memoize<T, TResult>","Description":"Memoize afunction","Author":"P.Revington","SubmittedOn":"4/26/2010 10:38:44 AM","Entries":["public static Func<T, TResult> Memoize<T, TResult>(this Func<T, TResult> func)\r\n        {\r\n            var t = new Dictionary<T, TResult>();\r\n            return n =>\r\n            {\r\n                if (t.ContainsKey(n)) return t[n];\r\n                else\r\n                {\r\n                    var result = func(n);\r\n                    t.Add(n, result);\r\n                    return result;\r\n                }\r\n            };\r\n        }","Func<string, string> format = new Func<string, string>(s =>\r\n        {\r\n            // a long running operation\r\n            System.Threading.Thread.Sleep(2000);\r\n            return String.Format(\"hello {0}\", s);\r\n        }).Memoize();\r\n        // takes 2000 ms\r\n        foreach (var item in Enumerable.Range(0, 100))\r\n        {\r\n            Response.WriteLine(format(\" world\"));\r\n        }"]}